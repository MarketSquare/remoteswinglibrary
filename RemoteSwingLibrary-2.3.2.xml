<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RemoteSwingLibrary" type="LIBRARY" format="ROBOT" scope="GLOBAL" generated="2023-03-17T09:43:53+00:00" specversion="4" source="C:\Users\ramonat\IdeaProjects\RemoteSwingLibrary\remoteswinglibrary\target\remoteswinglibrary-2.3.2.jar\RemoteSwingLibrary.py" lineno="121">
<version>2.3.2</version>
<doc>RemoteSwingLibrary is a Robot Framework library leveraging Java-agents to run
    [https://github.com/robotframework/SwingLibrary|SwingLibrary] keywords on Java-processes.

    To take the library into use add ``remoteswinglibrary-[version].jar`` to ``PYTHONPATH``.

    The library contains a simple socket server to communicate with Java agents. When taking the library into use,
    you can specify the port this server uses. Providing the port is optional. If you do not provide one,
    RemoteSwingLibrary will ask the OS for an unused port.

    Keywords directly offered by this library on top of SwingLibrary keywords are:
    - `Application Started`
    - `Ensure Application Should Close`
    - `Log Java System Properties`
    - `Reinitiate`
    - `Set Java Tool Options`
    - `Start Application`
    - `Switch To Application`
    - `System Exit`

    RemoteSwingLibrary also introduces two global variables that can be used during testing:
    - ``${REMOTESWINGLIBRARYPATH}`` the location of the remoteswinglibrary jar file.
    - ``${REMOTESWINGLIBRARYPORT}`` port used by the agents to communicate with the library - this is needed if a java
    agent is started for example from another machine.

    The following SwingLibrary keywords are not available through RemoteSwingLibrary:
    - `Launch Application`
    - SwingLibrary version of `Start Application`
    - `Start Application In Separate Thread`

     *Note:* `Get Table Cell Property` will return the string representation of that property
    and not the actual object. Complex objects are not passed through Remote library interface.

    = Locating components =
    Most of the keywords that operate on a visible component take an argument named ``identifier``, which is used to
    locate the element. The first matching element is operated on, according to these rules:

    - If the ``identifier`` is a number, it is used as a zero-based index for the particular component type in the
     current context. Using indices is, however, fragile and is strongly discouraged.
    - If the ``identifier`` matches to internal name of a component (set using ``setName`` method in Java code),
    that component is chosen.
    - For components that have visible text (e.g. buttons), ``identifier`` is also matched against that.
    - Text field keywords also support accessing awt-text fields by prefixing the identifier with ``awt=``.

    Keyword `List Components in Context` lists all components and their names and indices in a given context.

    = Regular expressions =

    More information about Java regular expressions and patterns can be found here:
    http://java.sun.com/docs/books/tutorial/essential/regex/ and here:
    http://java.sun.com/javase/7/docs/api/java/util/regex/Pattern.html.

    = Example =

    | ***** Settings *****
    | Documentation          This example demonstrates starting a Java application
    | ...                    using RemoteSwingLibrary
    |
    | Library                `RemoteSwingLibrary`
    |
    | ***** Test Cases *****
    | Testing Java application
    |     `Start Application`                myjavaapp   java -jar myjava.jar
    |     `Select Window`                    My App
    |     `Ensure Application Should Close`  15 seconds  Push Button            Exit

    </doc>
<tags>
</tags>
<inits>
<init name="__init__" lineno="253">
<arguments repr="port=0, debug=False, java9_or_newer=auto-detect">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="port=0">
<name>port</name>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="debug=False">
<name>debug</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="java9_or_newer=auto-detect">
<name>java9_or_newer</name>
<default>auto-detect</default>
</arg>
</arguments>
<doc>
        ``port``: optional port for the server receiving connections from remote agents

        ``debug``: optional flag that will start agent in mode with more logging for troubleshooting
        (set to ``True`` to enable)

        ``java9_or_newer``: optional flag that by default will try to automatically detect if Java version is greater
        than 8. If it fails to detect, manually set it to ``True`` or ``False`` accordingly. If the value is different
        from ``true``, ``1`` or ``yes`` (case insensitive) it will default to ``False``.

        *Note:* RemoteSwingLibrary is a so called Global Scope library. This means when it is imported once it will be
        available until end of robot run. Parameters used in imports from others suites will be ignored.
        If you need to change import options between suites, please use `Reinitiate` keyword.</doc>
<shortdoc/>
</init>
</inits>
<keywords>
<kw name="Add Table Cell Selection">
<arguments repr="identifier, row, cellIdentifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="cellIdentifier">
<name>cellIdentifier</name>
</arg>
</arguments>
<doc>Selects a cell in a table and adds it to the selection.
Does not clear earlier selections.

Examples:
| `Select Table Cell` | myTable | 0 | 2       | # Selects cell from first row and third column |
| `Select Table Cell` | myTable | 1 | Keyword | # Selects cell from second row and column with header 'Keyword' |</doc>
<shortdoc>Selects a cell in a table and adds it to the selection. Does not clear earlier selections.</shortdoc>
</kw>
<kw name="All Checkboxes Should Be Checked">
<arguments repr="">
</arguments>
<doc>Fails if any checkbox in current context is not checked.

Example:
| `Select Context` | My Checkbox Panel |
| `All Checkboxes Should Be Checked` | |</doc>
<shortdoc>Fails if any checkbox in current context is not checked.</shortdoc>
</kw>
<kw name="All Checkboxes Should Be Unchecked">
<arguments repr="">
</arguments>
<doc>Fails if any checkbox in current context is checked.

Example:
| `Select Context` | My Checkbox Panel |
| `All Checkboxes Should Be Unchecked` | |</doc>
<shortdoc>Fails if any checkbox in current context is checked.</shortdoc>
</kw>
<kw name="Application Started">
<arguments repr="alias, timeout=60, name_contains=, remote_port=0, remote_host=127.0.0.1">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="alias">
<name>alias</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout=60">
<name>timeout</name>
<default>60</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="name_contains=">
<name>name_contains</name>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="remote_port=0">
<name>remote_port</name>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="remote_host=127.0.0.1">
<name>remote_host</name>
<default>127.0.0.1</default>
</arg>
</arguments>
<doc>Detects new RemoteSwingLibrary Java-agents in applications that are started without
        using the `Start Application` keyword. The given ``alias`` is stored
        to identify the started application in RemoteSwingLibrary.
        Subsequent keywords will be passed on to this application. Agents in application
        started in previous robot runs can't be detected automatically, so you have to use ``remote_port`` parameter.</doc>
<shortdoc>Detects new RemoteSwingLibrary Java-agents in applications that are started without         using the `Start Application` keyword. The given ``alias`` is stored         to identify the started application in RemoteSwingLibrary.         Subsequent keywords will be passed on to this application. Agents in application         started in previous robot runs can't be detected automatically, so you have to use ``remote_port`` parameter.</shortdoc>
</kw>
<kw name="Button Should Be Disabled">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if button is enabled.

Example:
| `Button Should Be Disabled` | OK |</doc>
<shortdoc>Fails if button is enabled.</shortdoc>
</kw>
<kw name="Button Should Be Enabled">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if button is disabled.

Example:
| `Button Should Be Enabled` | OK |</doc>
<shortdoc>Fails if button is disabled.</shortdoc>
</kw>
<kw name="Button Should Exist">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if button does not exist within current context.

Example:
| `Button Should Exist` | OK |</doc>
<shortdoc>Fails if button does not exist within current context.</shortdoc>
</kw>
<kw name="Button Should Not Exist">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if button exists within current context.
You might want to set the waiting timeout with the keyword `Set Jemmy Timeout`.

Example:
| `Set Jemmy Timeouts`      | 1  |
| `Button Should Not Exist` | OK |</doc>
<shortdoc>Fails if button exists within current context. You might want to set the waiting timeout with the keyword `Set Jemmy Timeout`.</shortdoc>
</kw>
<kw name="Call Component Method">
<arguments repr="identifier, method, *args">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="method">
<name>method</name>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*args">
<name>args</name>
</arg>
</arguments>
<doc>Calls a method from specified component.

*N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Arguments are automatically converted if possible to type expected by the method.

Example:
| `Call Component Method` | buttonId | setToolTipText | new tooltip text || `Call Component Method` | regexp=^A.* | setToolTipText | new tooltip text |</doc>
<shortdoc>Calls a method from specified component.</shortdoc>
</kw>
<kw name="Cancel File Chooser">
<arguments repr="">
</arguments>
<doc>Cancels and closes file chooser.
Expects the file chooser to be open.

Example:
| `Push Button`         | Open File |
| `Cancel File Chooser` |             |</doc>
<shortdoc>Cancels and closes file chooser. Expects the file chooser to be open.</shortdoc>
</kw>
<kw name="Check All Checkboxes">
<arguments repr="">
</arguments>
<doc>Checks all checkboxes in current context.

Example:
| `Select Context` | My Checkbox Panel |
| `Check All Checkboxes` | |</doc>
<shortdoc>Checks all checkboxes in current context.</shortdoc>
</kw>
<kw name="Check Box Should Be Checked">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if checkbox is not checked.

Example:
| `Check Box Should Be Checked` | My Checkbox |</doc>
<shortdoc>Fails if checkbox is not checked.</shortdoc>
</kw>
<kw name="Check Box Should Be Disabled">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if checkbox is enabled.

Example:
| `Check Box Should Be Disabled` | My Checkbox |</doc>
<shortdoc>Fails if checkbox is enabled.</shortdoc>
</kw>
<kw name="Check Box Should Be Enabled">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if checkbox is disabled.

Example:
| `Check Box Should Be Enabled` | My Checkbox |</doc>
<shortdoc>Fails if checkbox is disabled.</shortdoc>
</kw>
<kw name="Check Box Should Be Unchecked">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if checkbox is checked.

Example:
| `Check Box Should Be Unchecked` | My Checkbox |</doc>
<shortdoc>Fails if checkbox is checked.</shortdoc>
</kw>
<kw name="Check Box Should Not Be Checked">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Alias for `Check Box Should Be Unchecked` keyword.</doc>
<shortdoc>Alias for `Check Box Should Be Unchecked` keyword.</shortdoc>
</kw>
<kw name="Check Check Box">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Uses current context to search for a checkbox and when found, checks it.

Example:
| `Check Check Box` | My Checkbox |</doc>
<shortdoc>Uses current context to search for a checkbox and when found, checks it.</shortdoc>
</kw>
<kw name="Choose From File Chooser">
<arguments repr="fileName=">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="fileName=">
<name>fileName</name>
<default/>
</arg>
</arguments>
<doc>Chooses from a filechooser by pushing the approve button.
An optional file name can be provided, which is inserted to the file name textfield.
Expects the file chooser to be open.

Example:
| `Push Button` | Open File    |
| `Choose From File Chooser` | /tmp/elements.xml |</doc>
<shortdoc>Chooses from a filechooser by pushing the approve button. An optional file name can be provided, which is inserted to the file name textfield. Expects the file chooser to be open.</shortdoc>
</kw>
<kw name="Clear Selection From List">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Clears selection from list.

Example:
| `Clear Selection From List` | myList |</doc>
<shortdoc>Clears selection from list.</shortdoc>
</kw>
<kw name="Clear Table Cell">
<arguments repr="identifier, row, columnIdentifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
</arguments>
<doc>Clears table cell contents.

Example:
| `Clear Table Cell` | myTable | 1 | 2 |</doc>
<shortdoc>Clears table cell contents.</shortdoc>
</kw>
<kw name="Clear Table Selection">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Clears selection from a table.

Example:
| `Clear Table Selection` | myTable |</doc>
<shortdoc>Clears selection from a table.</shortdoc>
</kw>
<kw name="Clear Text Field">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Clears contents of text component (e.g. text field, password field, text area).

See `[#Locating components|Locating components]` for details.

Examples:
| `Clear Textfield` | nameTextField |
| `Clear Textfield` | awt=streetaddress |</doc>
<shortdoc>Clears contents of text component (e.g. text field, password field, text area).</shortdoc>
</kw>
<kw name="Clear Tree Selection">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Clears selections from a tree.

Example:
| `Clear Tree Selection` | myTree |</doc>
<shortdoc>Clears selections from a tree.</shortdoc>
</kw>
<kw name="Click Hyper Link">
<arguments repr="identifier, linkText">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="linkText">
<name>linkText</name>
</arg>
</arguments>
<doc>Clicks on a hyperlink in a JEditorPane.
Fails if the link is not found.

Example:
| `Click Hyperlink` | myEditor | Network Elements |</doc>
<shortdoc>Clicks on a hyperlink in a JEditorPane. Fails if the link is not found.</shortdoc>
</kw>
<kw name="Click On Component">
<arguments repr="identifier, clickCountString=1, buttonString=BUTTON1_MASK, *keyModifierStrings">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="clickCountString=1">
<name>clickCountString</name>
<default>1</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="buttonString=BUTTON1_MASK">
<name>buttonString</name>
<default>BUTTON1_MASK</default>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*keyModifierStrings">
<name>keyModifierStrings</name>
</arg>
</arguments>
<doc>Clicks on a component, optionally using click count, a specific mouse button and keyboard modifiers.

*N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

The codes used for mouse button and key modifiers are the field names from ``java.awt.event.InputEvent``. For example: ``BUTTON1_MASK``, ``CTRL_MASK``, ``ALT_MASK``, ``ALT_GRAPH_MASK``, ``SHIFT_MASK``, and ``META_MASK``.

*Note:* Some keys have more convinient case insensitive aliases that can be used: ``LEFT BUTTON``, ``RIGHT BUTTON``, ``SHIFT``, ``CTRL``, ``ALT``, ``META``

Examples:
| `Click On Component`  | myComponent | # Double clicks with mouse button 2 on the component ... |
| ... | 2 | RIGHT BUTTON | ALT | # ... while holding down the ALT key |
| `Click On Component`  | regexp=^A.* | #Clicks with mouse button on a component starting with 'A' ... |</doc>
<shortdoc>Clicks on a component, optionally using click count, a specific mouse button and keyboard modifiers.</shortdoc>
</kw>
<kw name="Click On List Item">
<arguments repr="identifier, listItemIdentifier, clickCount=1">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="listItemIdentifier">
<name>listItemIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="clickCount=1">
<name>clickCount</name>
<default>1</default>
</arg>
</arguments>
<doc>Clicks on a list item.

Examples:
| `Click On List Item` | myList | myItem |
| `Click On List Item` | myList | 0      | 

An optional click count parameter can be provided for example if a double click is required.
Default click count is one:
| `Click On List Item` | myList | myItem | 2 | # doubleclicks on item |</doc>
<shortdoc>Clicks on a list item.</shortdoc>
</kw>
<kw name="Click On Table Cell">
<arguments repr="identifier, row, column, clickCountString=1, buttonString=BUTTON1_MASK, *keyModifierStrings">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="column">
<name>column</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="clickCountString=1">
<name>clickCountString</name>
<default>1</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="buttonString=BUTTON1_MASK">
<name>buttonString</name>
<default>BUTTON1_MASK</default>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*keyModifierStrings">
<name>keyModifierStrings</name>
</arg>
</arguments>
<doc>Clicks on a cell in a table, optionally using click count, a specific mouse button and keyboard modifiers.

The codes used for mouse button and key modifiers are the field names from ``java.awt.event.InputEvent``. For example: ``BUTTON1_MASK``, ``CTRL_MASK``, ``ALT_MASK``, ``ALT_GRAPH_MASK``, ``SHIFT_MASK``, and ``META_MASK``.

*Note:* Some keys have more convinient case insensitive aliases that can be used: ``LEFT BUTTON``, ``RIGHT BUTTON``, ``SHIFT``, ``CTRL``, ``ALT``, ``META``

Examples:
| `Click On Table Cell`  | myTable | 0 | 2 | # Double clicks with mouse button 2 on the cell in the first row and third column... |
| ... | 2 | RIGHT BUTTON | ALT | # ... while holding down the ALT key |
| `Click On Table Cell`  | myTable | 1 | Header | # Single click on the cell in the second row and column with header 'Header'... |
| ... | 1 | BUTTON1_MASK | CTRL_MASK | SHIFT_MASK | # ... while holding down the CTRL and SHIFT keys |</doc>
<shortdoc>Clicks on a cell in a table, optionally using click count, a specific mouse button and keyboard modifiers.</shortdoc>
</kw>
<kw name="Click On Tree Node">
<arguments repr="identifier, nodeIdentifier, nodeInstance=, clickCount=1">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="nodeInstance=">
<name>nodeInstance</name>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="clickCount=1">
<name>clickCount</name>
<default>1</default>
</arg>
</arguments>
<doc>Clicks on a tree node.

Examples:
| `Click On Tree Node` | myTree | Root|Folder |
| `Click On Tree Node` | myTree | 0      | 

An optional ``clickCount`` parameter can be provided for example if a double click is required.
Default click count is one:
| `Click On Tree Node` | myTree | Root|Folder | 2 | # doubleclicks on node |

In case of existence of multiple nodes with the same node identifier, ``nodeInstance`` can be used to click the desired node. If ``nodeInstance`` is not specified, first node found with desired ``nodeIdentifier`` is clicked. 

Node instance must be specified using ``#`` before the desired number.
*N.B.* ``#`` is a special character and must be escaped using ``\``.

Example:
| `Click On Tree Node` | mytree | Root|Folder | \#3 |   | # click 4th node with specified ``nodeIdentifier`` | 
| `Click On Tree Node` | mytree | Root|Folder | \#2 | 4 | # clicks 4 times the 3rd node with specified ``nodeIdentifier`` |</doc>
<shortdoc>Clicks on a tree node.</shortdoc>
</kw>
<kw name="Click Table Header">
<arguments repr="identifier, columnIdentifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
</arguments>
<doc>Clicks on table header of the given column.

Column can be identified either by index or by column title. Indexes start at 0.

Examples:
| `Click Table Header` | myTable | 2 | # Click the third column |
| `Click Table Header` | myTable | amount | # Click the column that has title 'amount' |</doc>
<shortdoc>Clicks on table header of the given column.</shortdoc>
</kw>
<kw name="Close All Dialogs">
<arguments repr="">
</arguments>
<doc>Closes all the dialogs that are open.</doc>
<shortdoc>Closes all the dialogs that are open.</shortdoc>
</kw>
<kw name="Close Dialog">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Closes a dialog.

*N.B.* Regular expression can be used to close the dialog by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Examples:
| `Close Dialog` | About |
| `Close Dialog`  | regexp=^A.* | Closes a dialog starting with 'A' |</doc>
<shortdoc>Closes a dialog.</shortdoc>
</kw>
<kw name="Close Internal Frame">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Closes internal frame.

Example:
| `Close Internal Frame`  | My Internal Frame |</doc>
<shortdoc>Closes internal frame.</shortdoc>
</kw>
<kw name="Close Window">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Closes a window.

*N.B.* Regular expression can be used to close the window by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Examples:
| `Close Window` | Help |
| `Close Window` | regexp=^H.* | Closes a window starting with letter H. |</doc>
<shortdoc>Closes a window.</shortdoc>
</kw>
<kw name="Collapse All Tree Nodes">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Collapses all nodes in a tree.

Example:
| `Collapse All Tree Nodes` | myTree |</doc>
<shortdoc>Collapses all nodes in a tree.</shortdoc>
</kw>
<kw name="Collapse Tree Node">
<arguments repr="identifier, nodeIdentifier, nodeInstance=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="nodeInstance=">
<name>nodeInstance</name>
<default/>
</arg>
</arguments>
<doc>Collapses a node in a tree.

See `Expand Tree Node` for information about ``nodeIdentifier``.

Examples:
| `Collapse Tree Node` | myTree | Root|Folder |
| `Collapse Tree Node` | myTree | 3 |

In case of existence of multiple nodes with the same node identifier, ``nodeInstance`` can be used to collapse the desired node. If ``nodeInstance`` is not specified, first node found with desired ``nodeIdentifier`` is collapsed. 

Node instance must be specified using ``#`` before the desired number.
*N.B.* ``#`` is a special character and must be escaped using ``\``.

Example:
| `Collapse Tree Node` | mytree | Root|Folder | \#2 | # collapses 3rd node with specified ``nodeIdentifier`` |</doc>
<shortdoc>Collapses a node in a tree.</shortdoc>
</kw>
<kw name="Combo Box Should Be Disabled">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if combobox is enabled.

Example:
| `Combo Box Should Be Disabled` | OK |</doc>
<shortdoc>Fails if combobox is enabled.</shortdoc>
</kw>
<kw name="Combo Box Should Be Enabled">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if combobox is disabled.

Example:
| `Combo Box Should Be Enabled` | OK |</doc>
<shortdoc>Fails if combobox is disabled.</shortdoc>
</kw>
<kw name="Component Should Be Visible">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Checks that component is visible.
*N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Even if one pixel of the component is visible, this keyword will pass.

Example:
| `Component Should Be Visible` | myComponent |
| `Component Should Be Visible` | regexp=^A.* |</doc>
<shortdoc>Checks that component is visible. *N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``. See more details in `[#Regular expressions|Regular expressions]` section.</shortdoc>
</kw>
<kw name="Component Should Exist">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if component does not exist within current context.
*N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

You might want to set the waiting timeout with the keyword `Set Jemmy Timeout`

Example:
| `Component Should Exist` | myPanel |
| `Component Should Exist` | regexp=^A.* | There should be a component starting with 'A' |</doc>
<shortdoc>Fails if component does not exist within current context. *N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``. See more details in `[#Regular expressions|Regular expressions]` section.</shortdoc>
</kw>
<kw name="Component Should Not Be Visible">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Checks that component is not visible.
*N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Fails if even one pixel of the component is visible.

Example:
| `Component Should Not Be Visible` | myComponent |
| `Component Should Not Be Visible` | regexp=^A.* |</doc>
<shortdoc>Checks that component is not visible. *N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``. See more details in `[#Regular expressions|Regular expressions]` section.</shortdoc>
</kw>
<kw name="Component Should Not Exist">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if component exists within current context.
*N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

You might want to set the waiting timeout with the keyword `Set Jemmy Timeout`

Example:
| `Component Should Not Exist` | myPanel |
| `Component Should Not Exist` | regexp=^A.* | No component starting with 'A' should exist |</doc>
<shortdoc>Fails if component exists within current context. *N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``. See more details in `[#Regular expressions|Regular expressions]` section.</shortdoc>
</kw>
<kw name="De Iconify Internal Frame">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>De-iconifies internal frame.

Example:
| `Close Internal Frame`  | My Internal Frame |</doc>
<shortdoc>De-iconifies internal frame.</shortdoc>
</kw>
<kw name="Decrease Spinner Value">
<arguments repr="identifier, times=1">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="times=1">
<name>times</name>
<default>1</default>
</arg>
</arguments>
<doc>Scrolls spinner button down.
The number of notches to scroll can be given as a second argument.

Examples:
| `Decrease Spinner Value` | mySpinner |   | # scrolls spinner button down a notch |
| `Decrease Spinner Value` | mySpinner | 4 | # scrolls spinner button down four notches |</doc>
<shortdoc>Scrolls spinner button down. The number of notches to scroll can be given as a second argument.</shortdoc>
</kw>
<kw name="Dialog Should Be Open">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if the dialog is not open.

Example:
| `Dialog Should Be Open` | About |</doc>
<shortdoc>Fails if the dialog is not open.</shortdoc>
</kw>
<kw name="Dialog Should Not Be Open">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if the dialog is open.
You might want to set the waiting timeout with the keyword `Set Jemmy Timeout`.

Example:
| `Set Jemmy Timeouts` | 2 |
| `Dialog Should Not Be Open` | About |</doc>
<shortdoc>Fails if the dialog is open. You might want to set the waiting timeout with the keyword `Set Jemmy Timeout`.</shortdoc>
</kw>
<kw name="Ensure Application Should Close">
<arguments repr="timeout, kw, *args">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="timeout">
<name>timeout</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="kw">
<name>kw</name>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*args">
<name>args</name>
</arg>
</arguments>
<doc> Runs the given keyword and waits until timeout for the application to close.
        If the application doesn't close, the keyword will take a screenshot and close the application
        and after that it will fail.
        In many cases calling the keyword that will close the application under test brakes the remote connection.
        This exception is ignored as it is expected by this keyword.
        Other exceptions will fail this keyword as expected.</doc>
<shortdoc> Runs the given keyword and waits until timeout for the application to close.         If the application doesn't close, the keyword will take a screenshot and close the application         and after that it will fail.         In many cases calling the keyword that will close the application under test brakes the remote connection.         This exception is ignored as it is expected by this keyword.         Other exceptions will fail this keyword as expected.</shortdoc>
</kw>
<kw name="Expand All Tree Nodes">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Expands all nodes in a tree.

Example:
| `Expand All Tree Nodes` | myTree |</doc>
<shortdoc>Expands all nodes in a tree.</shortdoc>
</kw>
<kw name="Expand Tree Node">
<arguments repr="identifier, nodeIdentifier, nodeInstance=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="nodeInstance=">
<name>nodeInstance</name>
<default/>
</arg>
</arguments>
<doc>Expands a node in a tree.

Argument ``nodeIdentifier`` can be either tree path (i.e visible labels of nodes to be expanded), or index of the expanded node element. Nested structures can only be expanded using the tree path syntax.

Examples:
| `Expand Tree Node` | myTree | Root|Folder |
| `Expand Tree Node` | myTree | 3 |
In case of existence of multiple nodes with the same node identifier, ``nodeInstance`` can be used to expand the desired node. If ``nodeInstance`` is not specified, first node found with desired ``nodeIdentifier`` is expanded. 

Node instance must be specified using ``#`` before the desired number.
*N.B.* ``#`` is a special character and must be escaped using ``\``.

Example:
| `Expand Tree Node` | mytree | Root|Folder | \#2 | # expands 3rd node with specified ``nodeIdentifier`` |</doc>
<shortdoc>Expands a node in a tree.</shortdoc>
</kw>
<kw name="Find Table Row">
<arguments repr="identifier, text, columnIdentifier=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="columnIdentifier=">
<name>columnIdentifier</name>
<default/>
</arg>
</arguments>
<doc>Finds the first row index that has a cell  that contains the given text.
This is useful when we want to operate on cells which location can change.

Examples:
| ${row}= | `Find Table Row` | myTable | Some Value |
| `Select From Table Cell Popup Menu` | myTable | ${row} | 2 | Activate |
| ${row}= | `Find Table Row` | myTable | Some Value | Some Column | # Searches the 'Some Value' from the specified  'Some Column'  | 
| ${row}= | `Find Table Row` | myTable | Some Value | 0 | # Searches the 'Some Value' from the column with index 0 |</doc>
<shortdoc>Finds the first row index that has a cell  that contains the given text. This is useful when we want to operate on cells which location can change.</shortdoc>
</kw>
<kw name="Focus To Component">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Sets focus to the component.
Useful for example when sending keyboard events to a component.

Example:
| `Focus To Component`     | myTextField |           | |
| `Focus To Component`     | regexp=^A.* |           | |
| `Send Keyboard Event`    | VK_C          | CTRL_MASK | # paste from clipboard |</doc>
<shortdoc>Sets focus to the component. Useful for example when sending keyboard events to a component.</shortdoc>
</kw>
<kw name="Get Button Text">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Uses current context to search for a button and when found, returns the text it is labeled with.

Example:
| ${buttonText}=    | `Get Button Text` | myButton      |
| `Should Be Equal` | My Button         | ${buttonText} |</doc>
<shortdoc>Uses current context to search for a button and when found, returns the text it is labeled with.</shortdoc>
</kw>
<kw name="Get Combobox Values">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns a list containing all the values of a combobox.

*N.B* This keyword will return the values contained by ``javax.swing.ComboBoxModel``,
this is not necessarily what is displayed on the GUI.

Example:
| ${comboboxValues}= | `Get Combobox Values` | myCombobox |
| `Should Contain`  | ${expectedValue} | ${comboboxValues} |</doc>
<shortdoc>Returns a list containing all the values of a combobox.</shortdoc>
</kw>
<kw name="Get Current Context">
<arguments repr="">
</arguments>
<doc>Returns the component name in current context or title if window or dialog is selected.

Example:
| ${context}= | `Get Current Context` | # Sets the identifier of the current context to a variable |</doc>
<shortdoc>Returns the component name in current context or title if window or dialog is selected.</shortdoc>
</kw>
<kw name="Get Internal Frames In Context">
<arguments repr="">
</arguments>
<doc>Returns all frames that are open in the current context.

Returns empty list if the context is not selected.

Example:
| `Select Main Window` |
| ${frames}= | `Get Internal Frames In Context` |
| `Should Contain` | ${frames} | Test Internal Frame |</doc>
<shortdoc>Returns all frames that are open in the current context.</shortdoc>
</kw>
<kw name="Get Label Content">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns the text displayed on a label.
Assumes that the label exists in the current context.

Example:
| ${labelText}=     | `Get Label Content` | addressLabel |
| `Should Be Equal` | Address:            | ${labelText} |</doc>
<shortdoc>Returns the text displayed on a label. Assumes that the label exists in the current context.</shortdoc>
</kw>
<kw name="Get List Item Count">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns the number of items contained in list.

Example:
| ${listItemCount}=    | `Get List Item Count` | myList      |
| `Should Be Equal As Integers` | 2 | ${listItemCount} |</doc>
<shortdoc>Returns the number of items contained in list.</shortdoc>
</kw>
<kw name="Get List Values">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns all values from a list.

Example:
| ${values}= | `Get List Values` | myList |
| `Should Be Equal`  | ${values} | one, two, three |</doc>
<shortdoc>Returns all values from a list.</shortdoc>
</kw>
<kw name="Get Main Menu Item Name">
<arguments repr="index">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="index">
<name>index</name>
</arg>
</arguments>
<doc>Selects an item from the menu of the window that was opened first and returns it's name.

Example:
| ${mainMenuItemName}= | `Get Main Menu Item Name` | 0                   |
| `Should Be Equal`    | File                      | ${mainMenuItemName} |</doc>
<shortdoc>Selects an item from the menu of the window that was opened first and returns it's name.</shortdoc>
</kw>
<kw name="Get Main Menu Item Names">
<arguments repr="">
</arguments>
<doc>Selects all items from the menu of the window that was opened first and returns their names.

Example:
| @{mainMenuItemNames}= | `Get Main Menu Item Names` |
| `Should Contain` | @{mainMenuItemNames} | File |</doc>
<shortdoc>Selects all items from the menu of the window that was opened first and returns their names.</shortdoc>
</kw>
<kw name="Get Menu Item Names">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Gets names of menu items.

Returns empty list if menu item has no children.

Examples:
| @{menus} | `Get Menu Item Names` | Tools|Testing |
| `Should Contain` | ${menus} | Test Tool |
| @{empty} | `Get Menu Item Names` | Tools|empty |
| `Should Be Empty` | ${empty} |</doc>
<shortdoc>Gets names of menu items.</shortdoc>
</kw>
<kw name="Get Menu Items From Popup Menu">
<arguments repr="identifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Gets item names from the components context popup menu.
*N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Does a right click on the component and retrieves the specified menu items from the popup menu.

Example:
| @{items}= | `Get Menu Items From Popup Menu` | myComponent | Actions |
| @{items}= | `Get Menu Items From Popup Menu` | regexp=^A.* | Actions |
| `Should Contain` | ${items} | Do something |</doc>
<shortdoc>Gets item names from the components context popup menu. *N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``. See more details in `[#Regular expressions|Regular expressions]` section.</shortdoc>
</kw>
<kw name="Get Node Items From Tree Popup Menu">
<arguments repr="identifier, nodeIdentifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Gets item names from the node context popup menu.
Clears earlier selections.
If several nodes have the same path then *only the first* menu item names of those nodes are returned.

Example:
| @{items}= | `Get Node Items From Tree Popup Menu` | myTree | Root|Folder | Actions |
| `Should Contain` | ${items} | Do something |</doc>
<shortdoc>Gets item names from the node context popup menu. Clears earlier selections. If several nodes have the same path then *only the first* menu item names of those nodes are returned.</shortdoc>
</kw>
<kw name="Get Selected Item From Combo Box">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns an item from a combobox.

Example:
| ${selectedItem}=   | `Get Selected Item From Combobox` | myComboBox      |
| `Should Be Equal`  | item three                        | ${selectedItem} |</doc>
<shortdoc>Returns an item from a combobox.</shortdoc>
</kw>
<kw name="Get Selected Item From Dropdown Menu">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Alias for `Get Selected Item From Combobox` keyword.</doc>
<shortdoc>Alias for `Get Selected Item From Combobox` keyword.</shortdoc>
</kw>
<kw name="Get Selected Tab Label">
<arguments repr="">
</arguments>
<doc>Returns the label of the tab that is currenctly selected.
Expects that only one tab pane exists in the current context.
If you need to operate on a different tab pane use `Select Tab Pane` keyword first.

Example:
| ${currentTab}= | `Get Selected Tab Label` |
| `Should Be Equal` | Customer Information | ${currentTab} |</doc>
<shortdoc>Returns the label of the tab that is currenctly selected. Expects that only one tab pane exists in the current context. If you need to operate on a different tab pane use `Select Tab Pane` keyword first.</shortdoc>
</kw>
<kw name="Get Selected Table Cell Value">
<arguments repr="identifier, source=auto">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source=auto">
<name>source</name>
<default>auto</default>
</arg>
</arguments>
<doc>Returns selected cell's value from a table.

Optional parameter ``source`` allows to override text extraction strategy. Available values are ``auto`` (default, will try to get text from cell component first and then from table model) and ``model`` (will only try to get text from table model).

Example:
| ${cellValue}=   | `Get Selected Table Cell Value`   | myTable      |
| `Should Be Equal` | tuesday                         | ${cellValue} |</doc>
<shortdoc>Returns selected cell's value from a table.</shortdoc>
</kw>
<kw name="Get Selected Value From List">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns the item that's currently selected in the list.

Example:
| ${listItem}=      | `Get Selected Value From List` | myList      |
| `Should Be Equal` | Expected Item                  | ${listItem} |</doc>
<shortdoc>Returns the item that's currently selected in the list.</shortdoc>
</kw>
<kw name="Get Selected Window Title">
<arguments repr="">
</arguments>
<doc>Returns the title of the selected window.
Assumes current context is window.

Example:
| ${title}=         | `Get Selected Window Title` |          |
| `Should Be Equal` | Help Contents               | ${title} |</doc>
<shortdoc>Returns the title of the selected window. Assumes current context is window.</shortdoc>
</kw>
<kw name="Get Selection Paths">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns a list with the selected paths of a chosen tree.

Example:
| ${expectedElements}= | `Create List` | firstSelectedPath | secondSelectedPath |
| ${chosen_paths} = | `Get Selection Paths` | myTree |
| `Lists Should Be Equal` | ${expectedElements} | ${actualElements} | # This keyword comes from Collections library |</doc>
<shortdoc>Returns a list with the selected paths of a chosen tree.</shortdoc>
</kw>
<kw name="Get Slider Value">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Uses current context to search for a slider and when found, returns its current value.

Example:
| ${sliderValue}=  | Get Slider Value | mySlider    |
| `Should Be Equal As Integers` | 12     | ${sliderValue} |</doc>
<shortdoc>Uses current context to search for a slider and when found, returns its current value.</shortdoc>
</kw>
<kw name="Get Spinner Value">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Uses current context to search for a spinner button and when found, returns its current value.

Example:
| ${spinnerValue}=  | `Get Spinner Value` | mySpinner    |
| `Should Be Equal As Integers` | 12     | ${spinnerValue} |</doc>
<shortdoc>Uses current context to search for a spinner button and when found, returns its current value.</shortdoc>
</kw>
<kw name="Get Table Cell Property">
<arguments repr="identifier, row, columnIdentifier, propertyName">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="propertyName">
<name>propertyName</name>
</arg>
</arguments>
<doc>Returns the property of the table cell.

Example:
| ${background}= | `Get Table Cell Property` | myTable | 1 | 2 | background |
| `Should Be Equal As Integers` | 255 | ${background.getRed()} | | | |</doc>
<shortdoc>Returns the property of the table cell.</shortdoc>
</kw>
<kw name="Get Table Cell Value">
<arguments repr="identifier, row, columnIdentifier, source=auto">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="source=auto">
<name>source</name>
<default>auto</default>
</arg>
</arguments>
<doc>Returns cell's value from a table.

The value from cell rendered with check box is a true/false string.
Optional parameter ``source`` allows to override text extraction strategy. Available values are ``auto`` (default, will try to get text from cell component first and then from table model) and ``model`` (will only try to get text from table model).

Example:
| ${cellValue}=     | `Get Table Cell Value` | myTable | 0            | 2 |
| `Should Be Equal` | tuesday                |         | ${cellValue} |   |</doc>
<shortdoc>Returns cell's value from a table.</shortdoc>
</kw>
<kw name="Get Table Column Count">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns the number of columns from a table.

Example:
| ${columnCount}= | `Get Table Column Count` | myTable |
| `Should Be Equal As Integers` | 4 | ${columnCount} |</doc>
<shortdoc>Returns the number of columns from a table.</shortdoc>
</kw>
<kw name="Get Table Column Values">
<arguments repr="identifier, columnIdentifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
</arguments>
<doc>Returns a list containing all the values of a table column.

Example:
| ${columnValues}=  | `Get Table Column Values` | myTable | columnTwo |
| `Should Contain`  | ${expectedValue}  | ${columnValues} |</doc>
<shortdoc>Returns a list containing all the values of a table column.</shortdoc>
</kw>
<kw name="Get Table Headers">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns table's header names.

Example:
| @{headers}= | `Get Table Headers` | myTable |</doc>
<shortdoc>Returns table's header names.</shortdoc>
</kw>
<kw name="Get Table Row Count">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns the number of rows from a table.

Example:
| ${rowCount}= | `Get Table Row Count` | myTable |
| `Should Be Equal As Integers` | 4 | ${rowCount} |</doc>
<shortdoc>Returns the number of rows from a table.</shortdoc>
</kw>
<kw name="Get Table Row Values">
<arguments repr="identifier, row">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
</arguments>
<doc>Returns a list containing all the values of a table row.

Example:
| ${rowValues}= | `Get Table Row Values` | myTable | 2 |
| `Should Contain`  | ${expectedValue} | ${rowValues} |</doc>
<shortdoc>Returns a list containing all the values of a table row.</shortdoc>
</kw>
<kw name="Get Table Values">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns a list of table rows containing all the values of a table.

Example:
| ${tableValues}= | `Get Table Values` | myTable | rowThree |
| `Should Be Equal`  | ${expectedValue} | ${tableValues[1][2]} |</doc>
<shortdoc>Returns a list of table rows containing all the values of a table.</shortdoc>
</kw>
<kw name="Get Text Field Value">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns the value of a text component (e.g. text field, password field, text area).

See `[#Locating components|Locating components]` for details.

Example:
| ${textFieldValue}= | `Get Textfield Value` | nameTextField     |
| `Should Be Equal`  | John Doe              | ${textFieldValue} |</doc>
<shortdoc>Returns the value of a text component (e.g. text field, password field, text area).</shortdoc>
</kw>
<kw name="Get Tooltip Text">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns the component's tooltip text.

*N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Example:
| ${tooltip}= | `Get Tooltip Text` | saveButton |
| `Should Be Equal`    | Save | ${tooltip} |
| ${tooltip}= | `Get Tooltip Text` | regexp=^A.* |
| `Should Be Equal`    | Save | ${tooltip} |</doc>
<shortdoc>Returns the component's tooltip text.</shortdoc>
</kw>
<kw name="Get Tree Node Child Names">
<arguments repr="identifier, *nodeIdentifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
</arguments>
<doc>Returns a list with all the child node names of the specified node.

Example:
| ${expectedElements}= | `Create List` | someElement | otherElement |
| ${actualElements}=   | `Get Tree Node Child Names` | myTree | Element Folder |
| `Lists Should Be Equal` | ${expectedElements} | ${actualElements} | # This keyword comes from Collections library |
If ``nodeIdentifier`` is not given or is ``$EMPTY``, all the root's children will be returned.</doc>
<shortdoc>Returns a list with all the child node names of the specified node.</shortdoc>
</kw>
<kw name="Get Tree Node Count">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns the count of all visible nodes.

Example:
| ${nodeCount}= | `Get Tree Node Count` | myTree |
| `Should Be Equal As Integers` | 3 | ${nodeCount} |</doc>
<shortdoc>Returns the count of all visible nodes.</shortdoc>
</kw>
<kw name="Get Tree Node Index">
<arguments repr="identifier, nodePath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodePath">
<name>nodePath</name>
</arg>
</arguments>
<doc>Returns the node index.
Argument ``nodePath`` must be a string of form ``path|to|node``.

Example:
| ${nodeIndex}= | `Get Tree Node Index` | myTree | Root|Folder|ElementX |
| `Should Be Equal As Integers` | 4 | ${nodeIndex} |</doc>
<shortdoc>Returns the node index. Argument ``nodePath`` must be a string of form ``path|to|node``.</shortdoc>
</kw>
<kw name="Get Tree Node Label">
<arguments repr="identifier, nodeIndex">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIndex">
<name>nodeIndex</name>
</arg>
</arguments>
<doc>Returns the node name.
Argument ``nodeIndex`` must be a number and it is counted from visible nodes (index starts from 0).

Example:
| ${nodeLabel}= | `Get Tree Node Label` | myTree | 3 |
| `Should Be Equal` | Element1 | ${nodeLabel} |</doc>
<shortdoc>Returns the node name. Argument ``nodeIndex`` must be a number and it is counted from visible nodes (index starts from 0).</shortdoc>
</kw>
<kw name="Get Window Size">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Returns a list containing the width and the height of the window.

Examples:
| ${size} | `Get Window Size` | Help | # Gets the size of the Help window. |
| `Should Be Equal As Integers` | ${size[0]} | 800 |
| `Should Be Equal As Integers` | ${size[1]} | 600 |</doc>
<shortdoc>Returns a list containing the width and the height of the window.</shortdoc>
</kw>
<kw name="Iconify Internal Frame">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Iconifies internal frame.

Example:
| `Close Internal Frame`  | My Internal Frame |</doc>
<shortdoc>Iconifies internal frame.</shortdoc>
</kw>
<kw name="Increase Spinner Value">
<arguments repr="identifier, times=1">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="times=1">
<name>times</name>
<default>1</default>
</arg>
</arguments>
<doc>Scrolls spinner button up.
The number of notches to scroll can be given as a second argument.

Examples:
| `Increase Spinner Value` | mySpinner |   | # scrolls spinner button up a notch |
| `Increase Spinner Value` | mySpinner | 4 | # scrolls spinner button up four notches |</doc>
<shortdoc>Scrolls spinner button up. The number of notches to scroll can be given as a second argument.</shortdoc>
</kw>
<kw name="Insert Into Text Field">
<arguments repr="identifier, text">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
</arguments>
<doc>Inserts text into a text component (e.g. text field, password field, text area).

See `[#Locating components|Locating components]` for details.

Examples:
| `Insert Into Textfield` | nameTextField | John Doe |
| `Insert Into Textfield` | awt=streetaddress | Karaportti 3 |</doc>
<shortdoc>Inserts text into a text component (e.g. text field, password field, text area).</shortdoc>
</kw>
<kw name="Internal Frame Should Be Open">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if the internal frame is *not* open.

Example:
| `Internal Frame Should Be Open` | My Internal Frame |</doc>
<shortdoc>Fails if the internal frame is *not* open.</shortdoc>
</kw>
<kw name="Internal Frame Should Exist">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if the internal frame doesn't exist in the current context.

Example:
| `Internal Frame Should Exist` | My Internal Frame |</doc>
<shortdoc>Fails if the internal frame doesn't exist in the current context.</shortdoc>
</kw>
<kw name="Internal Frame Should Not Be Open">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if the internal frame *is* open.

Example:
| `Internal Frame Should Not Be Open` | My Internal Frame |</doc>
<shortdoc>Fails if the internal frame *is* open.</shortdoc>
</kw>
<kw name="Internal Frame Should Not Exist">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if the internal frame exists in the current context.

Example:
| `Internal Frame Should Not Exist` | My Internal Frame |</doc>
<shortdoc>Fails if the internal frame exists in the current context.</shortdoc>
</kw>
<kw name="Label Should Exist">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if label does not exist within current context.

Example:
| `Label Should Exist` | myLabel |</doc>
<shortdoc>Fails if label does not exist within current context.</shortdoc>
</kw>
<kw name="Label Should Not Exist">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if label exists within current context.
You might want to set the waiting timeout with the keyword `Set Jemmy Timeout`.

Example:
| `Set Jemmy Timeouts`     | 1 |
| `Label Should Not Exist` | myLabel |</doc>
<shortdoc>Fails if label exists within current context. You might want to set the waiting timeout with the keyword `Set Jemmy Timeout`.</shortdoc>
</kw>
<kw name="Label Text Should Be">
<arguments repr="identifier, expected">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected">
<name>expected</name>
</arg>
</arguments>
<doc>Checks the equality of given text and the text displayed on a label.
Assumes that the label exists in the current context.

Example:
| `Label Text Should Be` | addressLabel | Address: |</doc>
<shortdoc>Checks the equality of given text and the text displayed on a label. Assumes that the label exists in the current context.</shortdoc>
</kw>
<kw name="List Component Methods">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>List methods of components object.
*N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

When working with custom components you may use this keyword to discover methods you can call with `Call Component Method` keyword.

Example:
| `List Component Methods` | myComponent |
| `List Component Methods` | regexp=^A.* |</doc>
<shortdoc>List methods of components object. *N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``. See more details in `[#Regular expressions|Regular expressions]` section.</shortdoc>
</kw>
<kw name="List Components In Context">
<arguments repr="formatted=">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="formatted=">
<name>formatted</name>
<default/>
</arg>
</arguments>
<doc>Prints components (their types and their internal names) from the selected context.

By default returns the component names without formatting used in the printout. If given an argument, the return value will have the same formatting as the printout. The internal name is set with component's ``setName`` method: https://docs.oracle.com/javase/7/docs/api/java/awt/Component.html#setName(java.lang.String).
See keywords, `Select Window`, `Select Dialog` and `Select Context` for details about context.

Examples:
| `Select Main Window`         |
| `List Components In Context` |
| `List Components In Context` | formatted |</doc>
<shortdoc>Prints components (their types and their internal names) from the selected context.</shortdoc>
</kw>
<kw name="List Dialogs">
<arguments repr="">
</arguments>
<doc>Gets list of open dialogs titles.

Logs the dialogs titles and names in parenthesis.

Example:
| `List Dialogs` |</doc>
<shortdoc>Gets list of open dialogs titles.</shortdoc>
</kw>
<kw name="List Should Contain">
<arguments repr="identifier, value">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value">
<name>value</name>
</arg>
</arguments>
<doc>Fails if value not in list.

Example:
| `List Should Contain` | myList | item |</doc>
<shortdoc>Fails if value not in list.</shortdoc>
</kw>
<kw name="List Should Not Contain">
<arguments repr="identifier, value">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value">
<name>value</name>
</arg>
</arguments>
<doc>Fails if value is in list.

Example:
| `List Should Not Contain` | myList | item |</doc>
<shortdoc>Fails if value is in list.</shortdoc>
</kw>
<kw name="List Windows">
<arguments repr="">
</arguments>
<doc>Gets list of open window titles.

Logs the window titles and names in parenthesis.

Example:
| `List Windows` |</doc>
<shortdoc>Gets list of open window titles.</shortdoc>
</kw>
<kw name="Log Java System Properties">
<arguments repr="">
</arguments>
<doc>Log and return java properties and environment information from the current java application.</doc>
<shortdoc>Log and return java properties and environment information from the current java application.</shortdoc>
</kw>
<kw name="Main Menu Item Should Be Checked">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Fails if checkbox menu item is not checked in the opened window that was opened first.

Example:
| `Main Menu Item Should Be Checked` | Tools|My Checkbox |</doc>
<shortdoc>Fails if checkbox menu item is not checked in the opened window that was opened first.</shortdoc>
</kw>
<kw name="Main Menu Item Should Exist">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Fails if menu item doesn't exist in the window that was opened first.
Shortcut for:
| `Select Window`    | 0 |
| `Menu Item Should Exist` | Tools|Testing|MyTestTool |

Example:
| `Main Menu Item Should Exist` | Tools|Testing|Test Tool |</doc>
<shortdoc>Fails if menu item doesn't exist in the window that was opened first. Shortcut for: | `Select Window`    | 0 | | `Menu Item Should Exist` | Tools|Testing|MyTestTool |</shortdoc>
</kw>
<kw name="Main Menu Item Should Not Be Checked">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Fails if checkbox menu item is checked in the opened window that was opened first.

Example:
| `Main Menu Item Should Not Be Checked` | Tools|My Checkbox |</doc>
<shortdoc>Fails if checkbox menu item is checked in the opened window that was opened first.</shortdoc>
</kw>
<kw name="Main Menu Item Should Not Exist">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Fails if menu item exists in the window that was opened first.
Shortcut for:
| `Select Window`    | 0 |
| `Menu Item Should Not Exist` | Tools|Testing|MyTestTool |

Example:
| `Main Menu Item Should Not Exist` | Tools|Testing|Test Tool |</doc>
<shortdoc>Fails if menu item exists in the window that was opened first. Shortcut for: | `Select Window`    | 0 | | `Menu Item Should Not Exist` | Tools|Testing|MyTestTool |</shortdoc>
</kw>
<kw name="Maximize Internal Frame">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Maximizes internal frame.

Example:
| `Maximize Internal Frame`  | My Internal Frame |</doc>
<shortdoc>Maximizes internal frame.</shortdoc>
</kw>
<kw name="Menu Item Should Be Checked">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Searches for an checkbox menu item from the menu of the currently selected window and fails if it is not checked.

Example:
| `Menu Item Should Be Checked` | Tools|My Checkbox |</doc>
<shortdoc>Searches for an checkbox menu item from the menu of the currently selected window and fails if it is not checked.</shortdoc>
</kw>
<kw name="Menu Item Should Be Disabled">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Alias for `Menu Item Should Not Be Enabled`</doc>
<shortdoc>Alias for `Menu Item Should Not Be Enabled`</shortdoc>
</kw>
<kw name="Menu Item Should Be Enabled">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Searches for an menu item from the menu of the currently selected window and fails if it is disabled.

Example:
| `Select Window`               | My Application           |
| `Menu Item Should Be Enabled` | Tools|Testing|MyTestTool |</doc>
<shortdoc>Searches for an menu item from the menu of the currently selected window and fails if it is disabled.</shortdoc>
</kw>
<kw name="Menu Item Should Exist">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Fails if menu item doesn't exist.

Example:
| `Menu Item Should Exist` | Tools|Testing|Test Tool |</doc>
<shortdoc>Fails if menu item doesn't exist.</shortdoc>
</kw>
<kw name="Menu Item Should Not Be Checked">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Searches for an checkbox menu item from the menu of the currently selected window and fails if it is checked.

Example:
| `Menu Item Should Not Be Checked` | Tools|My Checkbox |</doc>
<shortdoc>Searches for an checkbox menu item from the menu of the currently selected window and fails if it is checked.</shortdoc>
</kw>
<kw name="Menu Item Should Not Be Enabled">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Searches for an menu item from the menu of the currently selected window and fails if it is enabled.

Example:
| `Select Window`                   | My Application           |
| `Menu Item Should Not Be Enabled` | Tools|Testing|MyTestTool |</doc>
<shortdoc>Searches for an menu item from the menu of the currently selected window and fails if it is enabled.</shortdoc>
</kw>
<kw name="Menu Item Should Not Exist">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Fails if menu item exists.

Example:
| `Menu Item Should Not Exist` | Tools|Testing|Test Tool |</doc>
<shortdoc>Fails if menu item exists.</shortdoc>
</kw>
<kw name="Minimize Internal Frame">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Minimizes internal.

Example:
| `Minimize Internal Frame`  | My Internal Frame |</doc>
<shortdoc>Minimizes internal.</shortdoc>
</kw>
<kw name="Push Button">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Uses current context to search for a button and when found, pushes it.

Example:
| `Push Button` | OK |</doc>
<shortdoc>Uses current context to search for a button and when found, pushes it.</shortdoc>
</kw>
<kw name="Push Radio Button">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Uses current context to search for a radiobutton and when found, pushes it.

Example:
| `Select Radio Button` | My Radio Button |</doc>
<shortdoc>Uses current context to search for a radiobutton and when found, pushes it.</shortdoc>
</kw>
<kw name="Push Toggle Button">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Uses current context to search for a button and when found, pushes it.

Example:
| `Push Toggle Button` | Activated |</doc>
<shortdoc>Uses current context to search for a button and when found, pushes it.</shortdoc>
</kw>
<kw name="Radio Button Should Be Disabled">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if radio button is enabled.

Example:
| `Radio Button Should Be Disabled` | My Radio Button |</doc>
<shortdoc>Fails if radio button is enabled.</shortdoc>
</kw>
<kw name="Radio Button Should Be Enabled">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if radio button is disabled.

Example:
| `Radio Button Should Be Enabled` | My Radio Button |</doc>
<shortdoc>Fails if radio button is disabled.</shortdoc>
</kw>
<kw name="Radio Button Should Be Selected">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if radiobutton is not selected.

Example:
| `Radio Button Should Be Selected` | My Radio Button |</doc>
<shortdoc>Fails if radiobutton is not selected.</shortdoc>
</kw>
<kw name="Radio Button Should Not Be Selected">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if radiobutton is selected.

Example:
| `Radio Button Should Not Be Selected` | My Radio Button |</doc>
<shortdoc>Fails if radiobutton is selected.</shortdoc>
</kw>
<kw name="Radio Menu Item Should Be Selected">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Searches for a radio menu item from the menu of the currently selected window and fails if it is not checked.

Example:
| `Menu Item Should Be Selected` | Tools|My RadioItem |</doc>
<shortdoc>Searches for a radio menu item from the menu of the currently selected window and fails if it is not checked.</shortdoc>
</kw>
<kw name="Radio Menu Item Should Not Be Selected">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Searches for a radio menu item from the menu of the currently selected window and fails if it is selected.

Example:
| `Menu Item Should Not Be Selected` | Tools|My RadioItem |</doc>
<shortdoc>Searches for a radio menu item from the menu of the currently selected window and fails if it is selected.</shortdoc>
</kw>
<kw name="Reinitiate">
<arguments repr="port=0, debug=False, java9_or_newer=auto-detect">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="port=0">
<name>port</name>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="debug=False">
<name>debug</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="java9_or_newer=auto-detect">
<name>java9_or_newer</name>
<default>auto-detect</default>
</arg>
</arguments>
<doc>
        Restarts RemoteSwingLibrary with new import parameters.</doc>
<shortdoc/>
</kw>
<kw name="Right Click On Component">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Right clicks on a component.

*N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Example:
| `Right Click On Component` | myComponent || `Right Click On Component` | regexp=^A.* | #Right clicks on a component starting with 'A'</doc>
<shortdoc>Right clicks on a component.</shortdoc>
</kw>
<kw name="Run Keyword In Separate Thread">
<arguments repr="keywordName, *arguments">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="keywordName">
<name>keywordName</name>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*arguments">
<name>arguments</name>
</arg>
</arguments>
<doc>Executes the given keyword with the given arguments in a separate thread.
Useful if the given keyword starts a process that stays running (e.g. opens a dialog) and doesn't return.
Known limitations:
- The return value of the keyword being run is ignored.
- Exceptions thrown by the keyword are ignored, which implies that this keyword should not be used
  in conjunction with keywords such `Label Text Should Be` or `Menu Item Should Be Enabled`.</doc>
<shortdoc>Executes the given keyword with the given arguments in a separate thread. Useful if the given keyword starts a process that stays running (e.g. opens a dialog) and doesn't return. Known limitations: - The return value of the keyword being run is ignored. - Exceptions thrown by the keyword are ignored, which implies that this keyword should not be used   in conjunction with keywords such `Label Text Should Be` or `Menu Item Should Be Enabled`.</shortdoc>
</kw>
<kw name="Scroll Component To View">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Scrolls component to view.

*N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Example:
| `Scroll Component To View` | myComponent |
| `Scroll Component To View` | regexp=^A.* |</doc>
<shortdoc>Scrolls component to view.</shortdoc>
</kw>
<kw name="Select All List Items">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Selects all list items.

Example:
| `Select All List Items` | My List |</doc>
<shortdoc>Selects all list items.</shortdoc>
</kw>
<kw name="Select Context">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Selects a container as current context.
Context has to be a window, dialog, internal frame or panel. Requires that a parent context has been selected beforehand using `Select Window` or `Select Dialog`.

Example:
| `Select Window`  | Main Window | # Selects the 'parent context' |
| `Select Context` | myPanel     | # Sets 'myPanel' as current context |</doc>
<shortdoc>Selects a container as current context. Context has to be a window, dialog, internal frame or panel. Requires that a parent context has been selected beforehand using `Select Window` or `Select Dialog`.</shortdoc>
</kw>
<kw name="Select Dialog">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Selects a dialog as current context and sets focus to it.

*N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Examples:
| `Select Dialog`  | About |
| `Select Dialog`  | regexp=^A.* | Selects a dialog starting with 'A' |</doc>
<shortdoc>Selects a dialog as current context and sets focus to it.</shortdoc>
</kw>
<kw name="Select From Combo Box">
<arguments repr="identifier, comboItemIdentifier, *verifySelection">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="comboItemIdentifier">
<name>comboItemIdentifier</name>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*verifySelection">
<name>verifySelection</name>
</arg>
</arguments>
<doc>Selects an item from a combobox.
The item selection is verified by default and can be disabled using the optional ``verifySelection`` parameter with any value.

*N.B* If the ``comboItemIdentifier`` is a numerical value it vill be interpreted as index.

*N.B.* If the combobox changes its items on selection, disable the verification and optionally check the selection using the keyword `Get Selected Item From Combo Box`.

Examples:
| `Select From Combo Box` | myComboBox | myItem | # Selects 'myItem' from combobox |
| `Select From Combo Box` | myComboBox | 0      | # Selects the first item from combobox |
| `Select From Combo Box` | myComboBox | myItem | don't verify | # Selects 'myItem' from combobox and doesn't verify that myItem is selected |</doc>
<shortdoc>Selects an item from a combobox. The item selection is verified by default and can be disabled using the optional ``verifySelection`` parameter with any value.</shortdoc>
</kw>
<kw name="Select From Dropdown Menu">
<arguments repr="menuIdentifier, menuItemIdentifier, *verificationDisabled">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuIdentifier">
<name>menuIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuItemIdentifier">
<name>menuItemIdentifier</name>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*verificationDisabled">
<name>verificationDisabled</name>
</arg>
</arguments>
<doc>Alias for `Select From Combobox` keyword.</doc>
<shortdoc>Alias for `Select From Combobox` keyword.</shortdoc>
</kw>
<kw name="Select From List">
<arguments repr="identifier, listItemIdentifier, *additionalItemIdentifiers">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="listItemIdentifier">
<name>listItemIdentifier</name>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*additionalItemIdentifiers">
<name>additionalItemIdentifiers</name>
</arg>
</arguments>
<doc>Selects an item from the list.

Examples:
| `Select From List` | myList | myItem | # selects 'myItem'                   |
| `Select From List` | myList | 0      | # selects the first item in the list |

| `Select From List` | myList | myItem | 2 | # doubleclicks on item |
Any number of list item identifiers can be provided to select multiple items at once:
| `Select From List` | myList | myItem | anotherItem | yetAnother |</doc>
<shortdoc>Selects an item from the list.</shortdoc>
</kw>
<kw name="Select From List Item Popup Menu">
<arguments repr="identifier, listItemIdentifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="listItemIdentifier">
<name>listItemIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Selects an item from a list item popup.
Separator for items is ``|``.

Example:
| `Select From List Item Popup Menu` | myList | listItem | File|Exit |</doc>
<shortdoc>Selects an item from a list item popup. Separator for items is ``|``.</shortdoc>
</kw>
<kw name="Select From Main Menu">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Selects an item from the menu of the window that was opened first.
Shortcut for:
| `Select Window`    | 0 |
| `Select From Menu` | Tools|Testing|MyTestTool |

Example:
| `Select From Main Menu` | Tools|Testing|MyTestTool |</doc>
<shortdoc>Selects an item from the menu of the window that was opened first. Shortcut for: | `Select Window`    | 0 | | `Select From Menu` | Tools|Testing|MyTestTool |</shortdoc>
</kw>
<kw name="Select From Main Menu And Wait">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Selects an item from the menu of the window that was opened first and waits for action to finish.
Shortcut for:
| `Select Window`             | 0                        |
| `Select From Menu And Wait` | Tools|Testing|MyTestTool |

This keyword will not work, for example, if the menu item opens a dialog.

Example:
| `Select From Main Menu And Wait` | Tools|Testing|MyTestTool |</doc>
<shortdoc>Selects an item from the menu of the window that was opened first and waits for action to finish. Shortcut for: | `Select Window`             | 0                        | | `Select From Menu And Wait` | Tools|Testing|MyTestTool |</shortdoc>
</kw>
<kw name="Select From Menu">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Selects an item from the menu of the currently selected window.

Example:
| `Select Window`    | My Application           |
| `Select From Menu` | Tools|Testing|MyTestTool |</doc>
<shortdoc>Selects an item from the menu of the currently selected window.</shortdoc>
</kw>
<kw name="Select From Menu And Wait">
<arguments repr="menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Selects an item from the menu of the currently selected window and waits for action to finish.
This keyword will not work, for example, if the menu item opens a dialog.

Example:
| `Select Window`             | My Application           |
| `Select From Menu And Wait` | Tools|Testing|MyTestTool |</doc>
<shortdoc>Selects an item from the menu of the currently selected window and waits for action to finish. This keyword will not work, for example, if the menu item opens a dialog.</shortdoc>
</kw>
<kw name="Select From Popup Menu">
<arguments repr="identifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Selects an item from the components context popup menu.
*N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Does a right click on the component and selects the specified menu item from the popup menu.

Example:
| `Select From Popup Menu` | myComponent | Actions | Do something |
| `Select From Popup Menu` | regexp=^A.* | Actions | Do something |</doc>
<shortdoc>Selects an item from the components context popup menu. *N.B.* Regular expression can be used to select the dialog by prefixing the identifier with ``regexp=``. See more details in `[#Regular expressions|Regular expressions]` section.</shortdoc>
</kw>
<kw name="Select From Popup Menu On Selected Tree Nodes">
<arguments repr="identifier, menuPath, checkItemIsEnabled=True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="checkItemIsEnabled=True">
<name>checkItemIsEnabled</name>
<default>True</default>
</arg>
</arguments>
<doc>Invokes a menu action on all the selected tree nodes.
If ``checkItemIsEnabled`` is set to False, it does not wait for a result, so even if the menu item is disabled, the keyword does not fail .
 By default `checkItemIsEnabled` is True. 
Separator for items is ``|``.

Examples:
| `Select Tree Node` | myTree | Root|Folder1 | true |
| `Select Tree Node` | myTree | Root|Folder2 |
| `Select From Popup Menu On Selected Tree Nodes` | myTree | Remove |</doc>
<shortdoc>Invokes a menu action on all the selected tree nodes. If ``checkItemIsEnabled`` is set to False, it does not wait for a result, so even if the menu item is disabled, the keyword does not fail .  By default `checkItemIsEnabled` is True.  Separator for items is ``|``.</shortdoc>
</kw>
<kw name="Select From Table Cell Popup Menu">
<arguments repr="identifier, row, columnIdentifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Selects an item from a table cell popup.
Separator for items is ``|``.

Example:
| `Select From Table Cell Popup Menu` | myTable | 1 | 3 | Cell Actions|Clear Cell Value |</doc>
<shortdoc>Selects an item from a table cell popup. Separator for items is ``|``.</shortdoc>
</kw>
<kw name="Select From Table Cell Popup Menu On Selected Cells">
<arguments repr="identifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Selects an item from a table cell popup on the table cells that are selected.
Separator for items is ``|``.

Example:
| `Select From Table Cell Popup Menu On Selected Cells` | myTable | Cell Actions|Clear Cell Value |</doc>
<shortdoc>Selects an item from a table cell popup on the table cells that are selected. Separator for items is ``|``.</shortdoc>
</kw>
<kw name="Select From Table Header Popup Menu">
<arguments repr="identifier, columnIdentifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Selects an item from a table header popup.
Separator for items is ``|``.

Example:
| `Select From Table Header Popup Menu` | myTable | columnIdentifier | Cell Actions|Clear Cell Value |</doc>
<shortdoc>Selects an item from a table header popup. Separator for items is ``|``.</shortdoc>
</kw>
<kw name="Select From Tree Node Popup Menu">
<arguments repr="identifier, nodeIdentifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Selects an item from the tree node's popup menu.

Example:
| `Select From Tree Node Popup Menu` | myTree | Root|Folder | New Folder |</doc>
<shortdoc>Selects an item from the tree node's popup menu.</shortdoc>
</kw>
<kw name="Select From Tree Node Popup Menu In Separate Thread">
<arguments repr="identifier, nodeIdentifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Selects an item from the tree node's popup menu and does not wait for a result.
Needed if the action starts a process that stays running (e.g. opens a dialog) and the above keyword doesn't return.
Separator for items is ``|``.

Example:
| `Select From Tree Node Popup Menu In Separate Thread` | myTree | Root|Folder | New Folder |</doc>
<shortdoc>Selects an item from the tree node's popup menu and does not wait for a result. Needed if the action starts a process that stays running (e.g. opens a dialog) and the above keyword doesn't return. Separator for items is ``|``.</shortdoc>
</kw>
<kw name="Select Main Window">
<arguments repr="">
</arguments>
<doc>Selects the window that was opened first as current context.

Example:
| `Select Main Window` |</doc>
<shortdoc>Selects the window that was opened first as current context.</shortdoc>
</kw>
<kw name="Select Radio Button" deprecated="true">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>*DEPRECATED* Use keyword `Push Radio Button` instead.</doc>
<shortdoc>*DEPRECATED* Use keyword `Push Radio Button` instead.</shortdoc>
</kw>
<kw name="Select Tab">
<arguments repr="tabIdentifier, tabPaneIdentifier=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="tabIdentifier">
<name>tabIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="tabPaneIdentifier=">
<name>tabPaneIdentifier</name>
<default/>
</arg>
</arguments>
<doc>Selects a tab.
The optional tab pane identifier can be provided, otherwise the first matching tab is selected.

*N.B.* Regular expression can be used to select the tab pane or/and page by prefixing the identifiers with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Examples:
| `Select Tab` | Customer Information |
| `Select Tab` | Customer Information | Customers |
| `Select Tab` | regexp=^A.* | regexp=^B.* | Selects a tab page starting with 'A' from a tab pane starting with 'B' |</doc>
<shortdoc>Selects a tab. The optional tab pane identifier can be provided, otherwise the first matching tab is selected.</shortdoc>
</kw>
<kw name="Select Tab As Context">
<arguments repr="tabIdentifier, tabPaneIdentifier=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="tabIdentifier">
<name>tabIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="tabPaneIdentifier=">
<name>tabPaneIdentifier</name>
<default/>
</arg>
</arguments>
<doc>Selects a tab and sets it as the context.
The optional tab pane identifier can be provided, otherwise the first matching tab is selected.

*N.B.* Regular expression can be used to select the tab pane or/and page by prefixing the identifiers with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Examples:
| `Select Tab As Context` | Customer Information |
| `Select Tab As Context` | Customer Information | Customers |
| `Select Tab As Context` | regexp=^A.* | regexp=^B.* | Selects a tab page starting with 'A' from a tab pane starting with 'B' |</doc>
<shortdoc>Selects a tab and sets it as the context. The optional tab pane identifier can be provided, otherwise the first matching tab is selected.</shortdoc>
</kw>
<kw name="Select Tab Pane">
<arguments repr="tabPaneIdentifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="tabPaneIdentifier">
<name>tabPaneIdentifier</name>
</arg>
</arguments>
<doc>Sets a tab pane as the current context.
Useful if you have several tab panes in the window.

*N.B.* Regular expression can be used to select the tab pane by prefixing the identifiers with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Examples:
| `Select Tab Pane` | Other Tab Pane |
| `Select Tab Pane` | Customer Information |
| `Select Tab Pane` | regexp=^A.* | Selects a tab pane starting with 'A' |</doc>
<shortdoc>Sets a tab pane as the current context. Useful if you have several tab panes in the window.</shortdoc>
</kw>
<kw name="Select Table Cell">
<arguments repr="identifier, row, cellIdentifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="cellIdentifier">
<name>cellIdentifier</name>
</arg>
</arguments>
<doc>Selects a cell in a table.

Examples:
| `Select Table Cell` | myTable | 0 | 2       | # Selects cell from first row and third column |
| `Select Table Cell` | myTable | 1 | Keyword | # Selects cell from second row and column with header 'Keyword' |</doc>
<shortdoc>Selects a cell in a table.</shortdoc>
</kw>
<kw name="Select Table Cell Area">
<arguments repr="identifier, startRow, endRow, startColumn, endColumn">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="startRow">
<name>startRow</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="endRow">
<name>endRow</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="startColumn">
<name>startColumn</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="endColumn">
<name>endColumn</name>
</arg>
</arguments>
<doc>Selects a cell area in a table.
Does not clear earlier selections.

Example:
| `Select Table Cell Area` | myTable | 0 | 2 | 0 | 2 | # Selects cells from first to third row and first to third column |</doc>
<shortdoc>Selects a cell area in a table. Does not clear earlier selections.</shortdoc>
</kw>
<kw name="Select Tree Node">
<arguments repr="identifier, nodeIdentifier, nodeInstance=, *additionalNodeIdentifiers">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="nodeInstance=">
<name>nodeInstance</name>
<default/>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*additionalNodeIdentifiers">
<name>additionalNodeIdentifiers</name>
</arg>
</arguments>
<doc>Sets a node as selected in a tree.
Does not clear earlier selections.

Example:
| `Select Tree Node` | myTree | Root|Folder |
Any number of node identifiers can be provided to select multiple nodes at once:
| `Select Tree Node` | myTree | Root|Folder | Root|Folder2 | Root|Folder3 |

``nodeInstance`` specifies n-th node to choose if several nodes have the same node identifier. Node instance must be specified using ``#`` before the desired number.*N.B.* ``#`` is a special character and must be escaped using ``\``.
If ``nodeInstance`` is not specified then the *first node* with the corresponding ``nodeIdentifier`` will be selected.
If ``additionalNodeIdentifiers`` is specified ``nodeInstance`` will be set to ``0`` and the keyword will work by selecting the first node found that has specified ``nodeIdentifier``.

| `Select Tree Node` | myTree | Folder |  \#2 |  | # selects 3rd node which has the specified ``nodeIdentifier`` | 
| `Select Tree Node` | mytree | Folder | Folder2 |  | # if ``nodeInstance`` is not specified when using `additionalNodeIdentifiers` it will automatically select 1st element found that match ``nodeIdentifier`` | 
| `Select Tree Node` | mytree | Folder | \#1 | Folder2 | # selects 2nd node with ``nodeIdentifier`` and first occurrence of `Folder2` |</doc>
<shortdoc>Sets a node as selected in a tree. Does not clear earlier selections.</shortdoc>
</kw>
<kw name="Select Window">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Selects a window as current context and sets focus to it.

*N.B.* Regular expression can be used to select the window by prefixing the identifier with ``regexp=``.
See more details in `[#Regular expressions|Regular expressions]` section.

Examples:
| `Select Window` | Help |
| `Select Window` | regexp=^H.* | Selects a window starting with letter H. |</doc>
<shortdoc>Selects a window as current context and sets focus to it.</shortdoc>
</kw>
<kw name="Send Keyboard Event">
<arguments repr="keyCode, *modifiers">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="keyCode">
<name>keyCode</name>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*modifiers">
<name>modifiers</name>
</arg>
</arguments>
<doc>Sends keystrokes to the currently selected component.
Keystroke codes must be one of the mappings in ``abbot.tester.KeyStrokeMap`` (https://sourceforge.net/p/abbot/svn/1214/tree/trunk/abbot/src/abbot/tester/KeyStrokeMap.java#l110).
Constants from ``java.awt.event.InputEvent`` can be used as optional modifiers.

Examples with textfield:
| `Focus To Component`    | myTextfield          |                      |
| `Send Keyboard Event`   | VK_S                 |                      |
| `Send Keyboard Event`   | VK_O                 |                      |
| `Send Keyboard Event`   | VK_M                 |                      |
| `Send Keyboard Event`   | VK_E                 |                      |
| `Send Keyboard Event`   | VK_T                 | SHIFT_MASK           |
| `Send Keyboard Event`   | VK_E                 |                      |
| `Send Keyboard Event`   | VK_X                 |                      |
| `Send Keyboard Event`   | VK_T                 |                      |
| ${textFieldContents}=   | `Get Text Field Value` | myTextfield        |
| `Should Be Equal`       | someText             | ${textFieldContents} |

Examples with table:
| `SelectTableCell`               | myTable | 0          | 0 |
| `Send Keyboard Event`           | VK_TAB  |            |   |
| `Table Cell Should Be Selected` | myTable | 0          | 1 |
| `Send Keyboard Event`           | VK_TAB  | SHIFT_MASK |   |
| `Table Cell Should Be Selected` | myTable | 0          | 0 |</doc>
<shortdoc>Sends keystrokes to the currently selected component. Keystroke codes must be one of the mappings in ``abbot.tester.KeyStrokeMap`` (https://sourceforge.net/p/abbot/svn/1214/tree/trunk/abbot/src/abbot/tester/KeyStrokeMap.java#l110). Constants from ``java.awt.event.InputEvent`` can be used as optional modifiers.</shortdoc>
</kw>
<kw name="Set Java Tool Options">
<arguments repr="close_security_dialogs=True, remote_port=0, dir_path=None, custom=None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="close_security_dialogs=True">
<name>close_security_dialogs</name>
<default>True</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="remote_port=0">
<name>remote_port</name>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="dir_path=None">
<name>dir_path</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="custom=None">
<name>custom</name>
<default>None</default>
</arg>
</arguments>
<doc>Sets the ``JAVA_TOOL_OPTIONS`` to include RemoteSwingLibrary Agent and
        the ``_JAVA_OPTIONS`` to set a temporary policy granting all permissions.

        RemoteSwingLibrary Agent is normally enabled by `Start Application` by
        setting the ``JAVA_TOOL_OPTIONS`` environment variable only during
        that keyword call.

        Java processes started by other commands won't
        normally use the RemoteSwingLibrary agent. This keyword sets that same
        environment variable to be always used. So all java processes started
        after this will use the agent. This method also creates temporary
        Java policy file which grants all permissions and is set as
        policy for each java command call.</doc>
<shortdoc>Sets the ``JAVA_TOOL_OPTIONS`` to include RemoteSwingLibrary Agent and         the ``_JAVA_OPTIONS`` to set a temporary policy granting all permissions.</shortdoc>
</kw>
<kw name="Set Jemmy Dispatch Model">
<arguments repr="dispatch model">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="dispatch model">
<name>dispatch model</name>
</arg>
</arguments>
<doc>Sets the jemmy dispatching model.
The event dispatching is explained in https://jemmy.java.net/tutorial.html#robot
Possible models are ``QUEUE``, ``QUEUE_SHORTCUT`` (default), ``ROBOT``, ``ROBOT_SMOOTH``.
Returns the old dispatching model.

Example:
| `Set Jemmy Dispatch Model` | ROBOT |
| ${old model}= | `Set Jemmy Dispatch Model` | ROBOT_SMOOTH |</doc>
<shortdoc>Sets the jemmy dispatching model. The event dispatching is explained in https://jemmy.java.net/tutorial.html#robot Possible models are ``QUEUE``, ``QUEUE_SHORTCUT`` (default), ``ROBOT``, ``ROBOT_SMOOTH``. Returns the old dispatching model.</shortdoc>
</kw>
<kw name="Set Jemmy Timeout">
<arguments repr="timeoutName, timeout">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="timeoutName">
<name>timeoutName</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="timeout">
<name>timeout</name>
</arg>
</arguments>
<doc>Sets the jemmy timeout used for waiting a component to appear.
Timeout names are listed here: http://jemmy.java.net/OperatorsEnvironment.html#timeouts
Returns the old timeout setting value.

This keyword by default takes timeout value is seconds, you can however suffix it with ``ms`` to provide it in milliseconds.
Return value will always be in units you used for the argument.

Example:
| `Set Jemmy Timeout` | DialogWaiter.WaitDialogTimeout | 3 |
| ${oldSetting}= | `Set Jemmy Timeout` | DialogWaiter.WaitDialogTimeout | 3 |</doc>
<shortdoc>Sets the jemmy timeout used for waiting a component to appear. Timeout names are listed here: http://jemmy.java.net/OperatorsEnvironment.html#timeouts Returns the old timeout setting value.</shortdoc>
</kw>
<kw name="Set Jemmy Timeouts">
<arguments repr="timeout">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="timeout">
<name>timeout</name>
</arg>
</arguments>
<doc>Sets all relevant jemmy timeouts. 
By default they are all set to 5 seconds.

This keyword by default takes timeout value is seconds, you can however suffix it with ``ms`` to provide it in milliseconds.

List of all the timeouts this keywords sets:
| *Timeout Name* | *Description* |
| DialogWaiter.WaitDialogTimeout | Time to wait dialog displayed |
| FrameWaiter.WaitFrameTimeout | Time to wait frame displayed |
| WindowWaiter.WaitWindowTimeout | Time to wait window displayed |
| ComponentOperator.WaitComponentTimeout | Time to wait component displayed |
| ComponentOperator.WaitComponentEnabledTimeout | Time to wait component enabled |
| ComponentOperator.WaitStateTimeout | Used for example in combobox selection |
| JComboboxOperator.WaitGetSelectedItemTimeout | Time to wait for combobox selected item fetching |
| JComboBoxOperator.WaitListTimeout | Time to wait list opened | 
| JMenuOperator.WaitPopupTimeout | Time to wait popup displayed |
| JTreeOperator.WaitNodeExpandedTimeout | Time to wait node expanded |
| JTreeOperator.WaitNextNodeTimeout | Time to wait next node displayed |
| JTreeOperator.WaitNodeVisibleTimeout | Time to wait node visible |
| JListOperator.WaitFindItemIndexTimeout | Time to wait for list item to appear |

Example:
| `Set Jemmy Timeouts` | 3 |</doc>
<shortdoc>Sets all relevant jemmy timeouts.  By default they are all set to 5 seconds.</shortdoc>
</kw>
<kw name="Set Slider Value">
<arguments repr="identifier, value">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value">
<name>value</name>
</arg>
</arguments>
<doc>Sets the value for the slider found from the current context.

Example:
| `Set Slider Value` | mySlider  | 7  |</doc>
<shortdoc>Sets the value for the slider found from the current context.</shortdoc>
</kw>
<kw name="Set Spinner Number Value">
<arguments repr="identifier, value">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value">
<name>value</name>
</arg>
</arguments>
<doc>Sets the number value for the spinner found from the current context.

Examples:
| `Set Spinner Number Value` | mySpinner  | 100  |
| `Set Spinner Number Value` | mySpinner  | 7.5  |</doc>
<shortdoc>Sets the number value for the spinner found from the current context.</shortdoc>
</kw>
<kw name="Set Spinner String Value">
<arguments repr="identifier, value">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value">
<name>value</name>
</arg>
</arguments>
<doc>Sets the string value for the spinner found from the current context.

Example:
| `Set Spinner String Value` | mySpinner  | January  |</doc>
<shortdoc>Sets the string value for the spinner found from the current context.</shortdoc>
</kw>
<kw name="Set System Property">
<arguments repr="name, value">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name">
<name>name</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value">
<name>value</name>
</arg>
</arguments>
<doc>Set system property `name` to `value`
Equal commmand line usage `-Dname=value`.</doc>
<shortdoc>Set system property `name` to `value` Equal commmand line usage `-Dname=value`.</shortdoc>
</kw>
<kw name="Set Table Cell Value">
<arguments repr="identifier, row, columnIdentifier, newValue">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="newValue">
<name>newValue</name>
</arg>
</arguments>
<doc>Sets cell value in a table.

Example:
| `Set Table Cell Value` | 1 | 2 | New value |</doc>
<shortdoc>Sets cell value in a table.</shortdoc>
</kw>
<kw name="Set Window Size">
<arguments repr="identifier, width, height">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="width">
<name>width</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="height">
<name>height</name>
</arg>
</arguments>
<doc>Sets a window size.

Examples:
| `Set Window Size` | Help | 800 | 600 | # Re-sizes the Help window to 800 px width and 600 px height. |</doc>
<shortdoc>Sets a window size.</shortdoc>
</kw>
<kw name="Slider Should Exist">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if slider does not exist within current context.

Example:
| `Slider Should Exist` | mySlider |</doc>
<shortdoc>Fails if slider does not exist within current context.</shortdoc>
</kw>
<kw name="Slider Should Not Exist">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if slider exists within current context.

Example:
| `Slider Should Not Exist` | mySlider |</doc>
<shortdoc>Fails if slider exists within current context.</shortdoc>
</kw>
<kw name="Spinner Should Exist">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if spinner does not exist within current context.

Example:
| `Spinner Should Exist` | dateSpinner |</doc>
<shortdoc>Fails if spinner does not exist within current context.</shortdoc>
</kw>
<kw name="Spinner Should Not Exist">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if spinner exists within current context.

Example:
| `Spinner Should Not Exist` | dateSpinner |</doc>
<shortdoc>Fails if spinner exists within current context.</shortdoc>
</kw>
<kw name="Start Application">
<arguments repr="alias, command, timeout=60, name_contains=, close_security_dialogs=False, remote_port=0, dir_path=None, stdout=None, stderr=None, custom=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="alias">
<name>alias</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="command">
<name>command</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout=60">
<name>timeout</name>
<default>60</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="name_contains=">
<name>name_contains</name>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="close_security_dialogs=False">
<name>close_security_dialogs</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="remote_port=0">
<name>remote_port</name>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="dir_path=None">
<name>dir_path</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="stdout=None">
<name>stdout</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="stderr=None">
<name>stderr</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="custom=None">
<name>custom</name>
<default>None</default>
</arg>
</arguments>
<doc>Starts the process in the ``command`` parameter  on the host operating system.
        The given ``alias`` is stored to identify the started application in RemoteSwingLibrary.

        ``timeout`` (default 60) is timeout in seconds.

        ``name_contains`` is a text that must be part of the name of the java process that we are connecting to.
        It helps in situations where multiple java-processes are started.

        To see the name of the connecting java agents run tests with ``--loglevel DEBUG``.

        ``remote_port`` forces RSL agent to run on specific port, this is useful if you want to
        connect to this application later from another robot run.

        ``dir_path`` is the path where security dialogs screenshots are saved. It is working both with relative
        and absolute path. If ``dir_path`` is not specified the screenshots will not be taken.

        ``stdout`` is the path where to write stdout to.

        ``stderr`` is the path where to write stderr to.

        ``custom`` is a customizable field that can be set when starting the Java agent.

        This keyword returns the remote port of the connection.</doc>
<shortdoc>Starts the process in the ``command`` parameter  on the host operating system.         The given ``alias`` is stored to identify the started application in RemoteSwingLibrary.</shortdoc>
</kw>
<kw name="Switch To Application">
<arguments repr="alias">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="alias">
<name>alias</name>
</arg>
</arguments>
<doc>Switches between applications that are known to RemoteSwingLibrary.
        The application is identified using the ``alias``.
        Subsequent keywords will be passed on to this application.</doc>
<shortdoc>Switches between applications that are known to RemoteSwingLibrary.         The application is identified using the ``alias``.         Subsequent keywords will be passed on to this application.</shortdoc>
</kw>
<kw name="System Exit">
<arguments repr="exit_code=1">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="exit_code=1">
<name>exit_code</name>
<default>1</default>
</arg>
</arguments>
<doc> Uses the RemoteSwingLibrary java agent to call system exit for the current java application.</doc>
<shortdoc> Uses the RemoteSwingLibrary java agent to call system exit for the current java application.</shortdoc>
</kw>
<kw name="Table Cell Popup Menu Should Be Disabled">
<arguments repr="identifier, row, columnIdentifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Fails if the given table cell popup menu is enabled.
Separator for items is ``|``.

Example:
| `Table Cell Popup Menu Should Be Disabled` | myTable | 1 | 3 | Cell Actions|Clear Cell Value |</doc>
<shortdoc>Fails if the given table cell popup menu is enabled. Separator for items is ``|``.</shortdoc>
</kw>
<kw name="Table Cell Popup Menu Should Be Enabled">
<arguments repr="identifier, row, columnIdentifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Fails if the given table cell popup menu is disabled.
Separator for items is ``|``.

Example:
| `Table Cell Popup Menu Should Be Enabled` | myTable | 1 | 3 | Cell Actions|Clear Cell Value |</doc>
<shortdoc>Fails if the given table cell popup menu is disabled. Separator for items is ``|``.</shortdoc>
</kw>
<kw name="Table Cell Should Be Editable">
<arguments repr="identifier, row, columnIdentifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
</arguments>
<doc>Fails if given table cell is not editable in a table.

Examples:
| `Table Cell Should Be Editable` | myTable | 0 | 2       |
| `Table Cell Should Be Editable` | myTable | 1 | Keyword |</doc>
<shortdoc>Fails if given table cell is not editable in a table.</shortdoc>
</kw>
<kw name="Table Cell Should Be Selected">
<arguments repr="identifier, row, columnIdentifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
</arguments>
<doc>Fails if given table cell is not selected in a table.

Examples:
| `Table Cell Should Be Selected` | myTable | 0 | 2       |
| `Table Cell Should Be Selected` | myTable | 1 | Keyword |</doc>
<shortdoc>Fails if given table cell is not selected in a table.</shortdoc>
</kw>
<kw name="Table Cell Should Not Be Editable">
<arguments repr="identifier, row, columnIdentifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
</arguments>
<doc>Fails if given table cell is editable in a table.

Examples:
| `Table Cell Should Not Be Editable` | myTable | 0 | 2       |
| `Table Cell Should Not Be Editable` | myTable | 1 | Keyword |</doc>
<shortdoc>Fails if given table cell is editable in a table.</shortdoc>
</kw>
<kw name="Table Cell Should Not Be Selected">
<arguments repr="identifier, row, columnIdentifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
</arguments>
<doc>Fails if given table cell is selected in a table.

Examples:
| `Table Cell Should Be Selected` | myTable | 0 | 2       |
| `Table Cell Should Be Selected` | myTable | 1 | Keyword |</doc>
<shortdoc>Fails if given table cell is selected in a table.</shortdoc>
</kw>
<kw name="Text Field Should Be Disabled">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if text component (e.g. text field, password field, text area) is enabled.

See `[#Locating components|Locating components]` for details.

Example:
| `Textfield Should Be Disabled` | nameTextField |</doc>
<shortdoc>Fails if text component (e.g. text field, password field, text area) is enabled.</shortdoc>
</kw>
<kw name="Text Field Should Be Enabled">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if text component (e.g. text field, password field, text area) is disabled.

See `[#Locating components|Locating components]` for details.

Example:
| `Textfield Should Be Enabled` | nameTextField |</doc>
<shortdoc>Fails if text component (e.g. text field, password field, text area) is disabled.</shortdoc>
</kw>
<kw name="Toggle Button Should Be Selected">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if toggle button is not selected.

Example:
| `Toggle Button Should Be Selected` | My Toggle Button |</doc>
<shortdoc>Fails if toggle button is not selected.</shortdoc>
</kw>
<kw name="Toggle Button Should Not Be Selected">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if toggle button is selected.

Example:
| `Toggle Button Should Not Be Selected` | My Toggle Button |</doc>
<shortdoc>Fails if toggle button is selected.</shortdoc>
</kw>
<kw name="Tree Node Popup Menu Item Should Be Disabled">
<arguments repr="identifier, nodeIdentifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Fails if given popup menu item is enabled.

Examples:
| `Tree Node Popup Menu Item Should Be Disabled` | myTree | Root|Folder | New Folder |
| `Tree Node Popup Menu Item Should Be Disabled` | 0      | 1 | New Folder |</doc>
<shortdoc>Fails if given popup menu item is enabled.</shortdoc>
</kw>
<kw name="Tree Node Popup Menu Item Should Be Enabled">
<arguments repr="identifier, nodeIdentifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Fails if given popup menu item is disabled.

Examples:
| `Tree Node Popup Menu Item Should Be Enabled` | myTree | Root|Folder | New Folder |
| `Tree Node Popup Menu Item Should Be Enabled` | 0 | 1 | New Folder |</doc>
<shortdoc>Fails if given popup menu item is disabled.</shortdoc>
</kw>
<kw name="Tree Node Should Be Collapsed">
<arguments repr="identifier, nodeIdentifier, nodeInstance=, jemmyTimeout=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="nodeInstance=">
<name>nodeInstance</name>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="jemmyTimeout=">
<name>jemmyTimeout</name>
<default/>
</arg>
</arguments>
<doc>Fails if the tree node is expanded.
Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout.
See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.

Example:
| `Tree Node Should Be Collapsed` | myTree | Root|Folder |
| `Tree Node Should Be Collapsed` | myTree | Root|Folder | 4 |

In case of existence of multiple nodes with the same node identifier, ``nodeInstance`` can be used to check the desired node. If ``nodeInstance`` is not specified, first node found with desired ``nodeIdentifier`` is checked. 

Node instance must be specified using ``#`` before the desired number.
*N.B.* ``#`` is a special character and must be escaped using ``\``.

Example:
| `Tree Node Should Be Collapsed` | mytree | Root|Folder | \#3 |   | # checks 4th node with specified ``nodeIdentifier`` | 
| `Tree Node Should Be Collapsed` | mytree | Root|Folder | \#2 | 4 | # wait 4 seconds for the 3rd node with specified ``nodeIdentifier`` to be collapsed |</doc>
<shortdoc>Fails if the tree node is expanded. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.</shortdoc>
</kw>
<kw name="Tree Node Should Be Expanded">
<arguments repr="identifier, nodeIdentifier, nodeInstance=, jemmyTimeout=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="nodeInstance=">
<name>nodeInstance</name>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="jemmyTimeout=">
<name>jemmyTimeout</name>
<default/>
</arg>
</arguments>
<doc>Fails if the tree node is collapsed.
Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout.
See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.

Example:
| `Tree Node Should Be Expanded` | myTree | Root|Folder |
| `Tree Node Should Be Expanded` | myTree | Root|Folder | 4 |</doc>
<shortdoc>Fails if the tree node is collapsed. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.</shortdoc>
</kw>
<kw name="Tree Node Should Be Leaf">
<arguments repr="identifier, nodeIdentifier, nodeInstance=, jemmyTimeout=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="nodeInstance=">
<name>nodeInstance</name>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="jemmyTimeout=">
<name>jemmyTimeout</name>
<default/>
</arg>
</arguments>
<doc>Fails if the node has child nodes.
Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout.
See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.

Example:
| `Tree Node Should Be Leaf` | myTree | Root|Folder |
| `Tree Node Should Be Leaf` | myTree | Root|Folder | 4 |

``nodeInstance`` checks n-th node if it is a leaf, in case several nodes have the same node identifier. Node instance must be specified using ``#`` before the desired number.*N.B.* ``#`` is a special character and must be escaped using ``\``.
If ``nodeInstance`` is not specified then the *first node* with the corresponding ``nodeIdentifier`` will be checked.
| `Tree Node Should Be Leaf` | myTree | Root|Folder | \#1 | # checks if 2nd node with the specified ``nodeIdentifier`` is a leaf |</doc>
<shortdoc>Fails if the node has child nodes. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.</shortdoc>
</kw>
<kw name="Tree Node Should Be Selected">
<arguments repr="identifier, nodeIdentifier, nodeInstance=, jemmyTimeout=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="nodeInstance=">
<name>nodeInstance</name>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="jemmyTimeout=">
<name>jemmyTimeout</name>
<default/>
</arg>
</arguments>
<doc>Fails if the tree node is not selected.
Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout.
See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.

Example:
| `Tree Node Should Be Selected` | myTree | Root|Folder |
| `Tree Node Should Be Selected` | myTree | Root|Folder | 4 |
In case of existence of multiple nodes with the same node identifier, ``nodeInstance`` can be used to check the selection of the desired node. If ``nodeInstance`` is not specified, first node found with desired ``nodeIdentifier`` is checked. 

Node instance must be specified using ``#`` before the desired number."
*N.B.* ``#`` is a special character and must be escaped using ``\``.

Example:
| `Tree Node Should Be Selected` | mytree | Root|Folder | \#3 |   | # check if 4th node is selected with specified ``nodeIdentifier`` | 
| `Tree Node Should Be Selected` | mytree | Root|Folder | \#2 | 4 | # wait checking of 3rd node with specified ``nodeIdentifier`` in 4 seconds |</doc>
<shortdoc>Fails if the tree node is not selected. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.</shortdoc>
</kw>
<kw name="Tree Node Should Be Visible">
<arguments repr="identifier, nodeIdentifier, nodeInstance=, jemmyTimeout=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="nodeInstance=">
<name>nodeInstance</name>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="jemmyTimeout=">
<name>jemmyTimeout</name>
<default/>
</arg>
</arguments>
<doc>Fails if the tree node is not visible.
Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout.
See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.

Example:
| `Tree Node Should Be Visible` | myTree | Root|Folder |
| `Tree Node Should Be Visible` | myTree | Root|Folder | 4 |

``nodeInstance`` checks n-th node if it is visible, in case several nodes have the same node identifier. Node instance must be specified using ``#`` before the desired number.*N.B.* ``#`` is a special character and must be escaped using ``\``.
If ``nodeInstance`` is not specified then the *first node* with the corresponding ``nodeIdentifier`` will be checked.
| `Tree Node Should Be Visible` | myTree | Root|Folder | \#1 |   | # checks if 2nd node with the specified ``nodeIdentifier`` is visible |
| `Tree Node Should Be Visible` | myTree | Root|Folder | \#1 | 4 | # checks for 4 seconds if 2nd node with the specified ``nodeIdentifier`` is visible |</doc>
<shortdoc>Fails if the tree node is not visible. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.</shortdoc>
</kw>
<kw name="Tree Node Should Exist">
<arguments repr="identifier, nodeIdentifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
</arguments>
<doc>Fails if the tree node does not exist.

Example:
| `Tree Node Should Exist` | myTree | Root|Folder |</doc>
<shortdoc>Fails if the tree node does not exist.</shortdoc>
</kw>
<kw name="Tree Node Should Not Be Leaf">
<arguments repr="identifier, nodeIdentifier, nodeInstance=, jemmyTimeout=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="nodeInstance=">
<name>nodeInstance</name>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="jemmyTimeout=">
<name>jemmyTimeout</name>
<default/>
</arg>
</arguments>
<doc>Fails if the node doesn't have child nodes.
Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout.
See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.

Example:
| `Tree Node Should Not Be Leaf` | myTree | Root|Folder |
| `Tree Node Should Not Be Leaf` | myTree | Root|Folder | 4 |
``nodeInstance`` checks n-th node if it is not a leaf, in case several nodes have the same node identifier. Node instance must be specified using ``#`` before the desired number.*N.B.* ``#`` is a special character and must be escaped using ``\``.
If ``nodeInstance`` is not specified then the *first node* with the corresponding ``nodeIdentifier`` will be checked.
| `Tree Node Should Not Be Leaf` | myTree | Root|Folder | \#1 |   | # checks if 2nd node with the specified ``nodeIdentifier`` is not leaf |
| `Tree Node Should Not Be Leaf` | myTree | Root|Folder | \#1 | 4 | # checks for 4 seconds if 2nd node with the specified ``nodeIdentifier`` is not leaf |</doc>
<shortdoc>Fails if the node doesn't have child nodes. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.</shortdoc>
</kw>
<kw name="Tree Node Should Not Be Selected">
<arguments repr="identifier, nodeIdentifier, nodeInstance=, jemmyTimeout=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="nodeInstance=">
<name>nodeInstance</name>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="jemmyTimeout=">
<name>jemmyTimeout</name>
<default/>
</arg>
</arguments>
<doc>Fails if the tree node is selected.
Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout.
See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.

Example:
| `Tree Node Should Be Selected` | myTree | Root|Folder |
| `Tree Node Should Be Selected` | myTree | Root|Folder | 4 |
In case of existence of multiple nodes with the same node identifier ``nodeInstance`` can be used to check the selection of the desired node. If ``nodeInstance`` is not specified first node found with desired ``nodIdentifier`` is checked.

Node instance must be specified using ``#`` before the desired number."
*N.B.* ``#`` is a special character and must be escaped using ``\``.

Example:
| `Tree Node Should Not Be Selected` | mytree | Root|Folder | \#2 |   | # check if 3rd occurrence of ``nodeIdentifier`` is not selected |
| `Tree Node Should Not Be Selected` | mytree | Root|Folder | \#2 | 4 | # wait checking the selection of the 3rd node with specified ``nodeIdentifier`` in 4 seconds |</doc>
<shortdoc>Fails if the tree node is selected. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.</shortdoc>
</kw>
<kw name="Tree Node Should Not Be Visible">
<arguments repr="identifier, nodeIdentifier, nodeInstance=, jemmyTimeout=5">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="nodeInstance=">
<name>nodeInstance</name>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="jemmyTimeout=5">
<name>jemmyTimeout</name>
<default>5</default>
</arg>
</arguments>
<doc>Fails if the tree node is visible.
Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout.
See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.

Example:
| `Tree Node Should Not Be Visible` | myTree | Root|Folder |
| `Tree Node Should Not Be Visible` | myTree | Root|Folder | 4 |

``nodeInstance`` checks n-th node if it is not visible, in case several nodes have the same node identifier. Node instance must be specified using ``#`` before the desired number.*N.B.* ``#`` is a special character and must be escaped using ``\``.
If ``nodeInstance`` is not specified then the *first node* with the corresponding ``nodeIdentifier`` will be checked.
| `Tree Node Should Not Be Visible` | myTree | Root|Folder | \#1 |   | # checks if 2nd node with the specified ``nodeIdentifier`` is not visible |
| `Tree Node Should Not Be Visible` | myTree | Root|Folder | \#1 | 4 | # checks for 4 seconds if 2nd node with the specified ``nodeIdentifier`` is not visible |</doc>
<shortdoc>Fails if the tree node is visible. Optionally, you can set jemmy timeout, default value being None. It will automatically select the right timeout. See `Set Jemmy Timeout` keyword for more information about jemmy timeouts.</shortdoc>
</kw>
<kw name="Tree Node Should Not Exist">
<arguments repr="identifier, nodeIdentifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
</arguments>
<doc>Fails if the tree node exists.

Example:
| `Tree Node Should Not Exist` | myTree | Root|Folder |</doc>
<shortdoc>Fails if the tree node exists.</shortdoc>
</kw>
<kw name="Tree Nodes Popup Menu Item Should Be Disabled">
<arguments repr="identifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Fails if given nodes popup menu item is enabled.

Examples:
| `Tree Nodes Popup Menu Item Should Be Disabled` | myTree | New Folder |
| `Tree Nodes Popup Menu Item Should Be Disabled` | 0 | New Folder |</doc>
<shortdoc>Fails if given nodes popup menu item is enabled.</shortdoc>
</kw>
<kw name="Tree Nodes Popup Menu Item Should Be Enabled">
<arguments repr="identifier, menuPath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="menuPath">
<name>menuPath</name>
</arg>
</arguments>
<doc>Fails if given nodes popup menu item is disabled.

Examples:
| `Tree Nodes Popup Menu Item Should Be Enabled` | myTree | New Folder |
| `Tree Nodes Popup Menu Item Should Be Enabled` | 0 | New Folder |</doc>
<shortdoc>Fails if given nodes popup menu item is disabled.</shortdoc>
</kw>
<kw name="Type Into Combobox">
<arguments repr="identifier, text">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
</arguments>
<doc>Types text into a combobox.

Example:
| `Type Into Combobox` | myCombobox | someValue |</doc>
<shortdoc>Types text into a combobox.</shortdoc>
</kw>
<kw name="Type Into Table Cell">
<arguments repr="identifier, row, columnIdentifier, newValue">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="row">
<name>row</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="columnIdentifier">
<name>columnIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="newValue">
<name>newValue</name>
</arg>
</arguments>
<doc>Types a string into a table cell.
Uses real keyboard events, this is useful when processing need to be triggered by input events.

Example:
| `Type Into Table Cell` | 1 | 2 | New value |</doc>
<shortdoc>Types a string into a table cell. Uses real keyboard events, this is useful when processing need to be triggered by input events.</shortdoc>
</kw>
<kw name="Type Into Text Field">
<arguments repr="identifier, text">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
</arguments>
<doc>Types text into a text component (e.g. text field, password field, text area).
Same as `Insert Into Textfield` but sends real key events when setting text field contents.
Useful if application expects real keyboard events instead of only setting the text of the textfield.

See `[#Locating components|Locating components]` for details.

Examples:
| `Type Into Textfield` | nameTextField | John Doe |
| `Type Into Textfield` | awt=streetaddress | Karaportti 3 |</doc>
<shortdoc>Types text into a text component (e.g. text field, password field, text area). Same as `Insert Into Textfield` but sends real key events when setting text field contents. Useful if application expects real keyboard events instead of only setting the text of the textfield.</shortdoc>
</kw>
<kw name="Uncheck All Checkboxes">
<arguments repr="">
</arguments>
<doc>Unchecks all checkboxes in current context.

Example:
| `Select Context` | My Checkbox Panel |
| `Uncheck All Checkboxes` | |</doc>
<shortdoc>Unchecks all checkboxes in current context.</shortdoc>
</kw>
<kw name="Uncheck Check Box">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Uses current context to search for a checkbox and when found, unchecks it.

Example:
| `Uncheck Check Box` | My Checkbox |</doc>
<shortdoc>Uses current context to search for a checkbox and when found, unchecks it.</shortdoc>
</kw>
<kw name="Unselect Tree Node">
<arguments repr="identifier, nodeIdentifier, nodeInstance=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="nodeIdentifier">
<name>nodeIdentifier</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="nodeInstance=">
<name>nodeInstance</name>
<default/>
</arg>
</arguments>
<doc>Sets a tree node as unselected.

Example:
| `Unselect Tree Node` | myTree | Root|Folder |

``nodeInstance`` specifies n-th node to unselect if several nodes have the same node identifier. Node instance must be specified using ``#`` before the desired number.*N.B.* ``#`` is a special character and must be escaped using ``\``.
If ``nodeInstance`` is not specified then the *first node* with the corresponding ``nodeIdentifier`` will be selected.
| `Unselect Tree Node` | myTree | Root|Folder | \#1 | # unselects 2nd node with the specified ``nodeIdentifier`` |</doc>
<shortdoc>Sets a tree node as unselected.</shortdoc>
</kw>
<kw name="Window Should Be Open">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if the window is not open.

Example:
| `Window Should Be Open` | window |</doc>
<shortdoc>Fails if the window is not open.</shortdoc>
</kw>
<kw name="Window Should Not Be Open">
<arguments repr="identifier">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="identifier">
<name>identifier</name>
</arg>
</arguments>
<doc>Fails if the window is open.
| `Window Should Not Be Open` | window |</doc>
<shortdoc>Fails if the window is open. | `Window Should Not Be Open` | window |</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
<typedocs>
</typedocs>
</keywordspec>
